/**
 * @author generated by eTrice
 *
 * Instance File of Node node with SubSystem subSystemRef
 * - instantiation of all actor instances and port instances
 * - configuration of data and connection of ports
 */

#include "messaging/etMessageService.h"

/* include all referenced room classes */
#include "room/basic/service/timing/ATimingService.h"
#include "TemplateModel/AccelPedalDiagEntity.h"
#include "TemplateModel/AccelPedalSensor.h"
#include "TemplateModel/AirMassFlowChanger.h"
#include "TemplateModel/AirMassFlowEntity.h"
#include "TemplateModel/AirSystem.h"
#include "TemplateModel/BassFuelMassEntity.h"
#include "TemplateModel/BassFuelMassEntity2.h"
#include "TemplateModel/CylinerNumObserver.h"
#include "TemplateModel/FuelingSystem.h"
#include "TemplateModel/IgnitionActuator.h"
#include "TemplateModel/IgnitionSystem.h"
#include "TemplateModel/IgnitionTimingActuatorEntity.h"
#include "TemplateModel/IgnitionTimingEntity.h"
#include "TemplateModel/InjectionActuator.h"
#include "TemplateModel/InjectionTimingActuatorEntity.h"
#include "TemplateModel/MassAirFlowSensor.h"
#include "TemplateModel/ThrottleActuator.h"
#include "TemplateModel/ThrottleSensor.h"
#include "TemplateModel/TopActor.h"
#include "TemplateModel/TotalFuelingEntity.h"
#include "TemplateModel/TransientFuelingCompensationEntity.h"
#include "TemplateModel/pedalfeel.h"
#include "TemplateModel/pedalvoter.h"
#include "TemplateModel/throttlecontroller.h"

/* instantiation of message services and message buffers */
/* DefaultPhysicalThread */
#define DEFAULTPHYSICALTHREAD_POOL_SIZE		200
#define DEFAULTPHYSICALTHREAD_BLOCK_SIZE	200
static uint8 msgBuffer_DefaultPhysicalThread[DEFAULTPHYSICALTHREAD_POOL_SIZE * DEFAULTPHYSICALTHREAD_BLOCK_SIZE];
static etMessageService msgService_DefaultPhysicalThread;
/* PedalThread */
#define PEDALTHREAD_POOL_SIZE		200
#define PEDALTHREAD_BLOCK_SIZE	200
static uint8 msgBuffer_PedalThread[PEDALTHREAD_POOL_SIZE * PEDALTHREAD_BLOCK_SIZE];
static etMessageService msgService_PedalThread;
/* ThrottleThread */
#define THROTTLETHREAD_POOL_SIZE		200
#define THROTTLETHREAD_BLOCK_SIZE	200
static uint8 msgBuffer_ThrottleThread[THROTTLETHREAD_POOL_SIZE * THROTTLETHREAD_BLOCK_SIZE];
static etMessageService msgService_ThrottleThread;
/* AirflowThread */
#define AIRFLOWTHREAD_POOL_SIZE		200
#define AIRFLOWTHREAD_BLOCK_SIZE	200
static uint8 msgBuffer_AirflowThread[AIRFLOWTHREAD_POOL_SIZE * AIRFLOWTHREAD_BLOCK_SIZE];
static etMessageService msgService_AirflowThread;
/* AirsysThread */
#define AIRSYSTHREAD_POOL_SIZE		200
#define AIRSYSTHREAD_BLOCK_SIZE	200
static uint8 msgBuffer_AirsysThread[AIRSYSTHREAD_POOL_SIZE * AIRSYSTHREAD_BLOCK_SIZE];
static etMessageService msgService_AirsysThread;
/* FuelingsysThread */
#define FUELINGSYSTHREAD_POOL_SIZE		200
#define FUELINGSYSTHREAD_BLOCK_SIZE	200
static uint8 msgBuffer_FuelingsysThread[FUELINGSYSTHREAD_POOL_SIZE * FUELINGSYSTHREAD_BLOCK_SIZE];
static etMessageService msgService_FuelingsysThread;
/* IgnitionsysThread */
#define IGNITIONSYSTHREAD_POOL_SIZE		200
#define IGNITIONSYSTHREAD_BLOCK_SIZE	200
static uint8 msgBuffer_IgnitionsysThread[IGNITIONSYSTHREAD_POOL_SIZE * IGNITIONSYSTHREAD_BLOCK_SIZE];
static etMessageService msgService_IgnitionsysThread;
/* ThrottleactThread */
#define THROTTLEACTTHREAD_POOL_SIZE		200
#define THROTTLEACTTHREAD_BLOCK_SIZE	200
static uint8 msgBuffer_ThrottleactThread[THROTTLEACTTHREAD_POOL_SIZE * THROTTLEACTTHREAD_BLOCK_SIZE];
static etMessageService msgService_ThrottleactThread;
/* InjectactThread */
#define INJECTACTTHREAD_POOL_SIZE		200
#define INJECTACTTHREAD_BLOCK_SIZE	200
static uint8 msgBuffer_InjectactThread[INJECTACTTHREAD_POOL_SIZE * INJECTACTTHREAD_BLOCK_SIZE];
static etMessageService msgService_InjectactThread;
/* IgniactThread */
#define IGNIACTTHREAD_POOL_SIZE		200
#define IGNIACTTHREAD_BLOCK_SIZE	200
static uint8 msgBuffer_IgniactThread[IGNIACTTHREAD_POOL_SIZE * IGNIACTTHREAD_BLOCK_SIZE];
static etMessageService msgService_IgniactThread;
/* PedaldiagThread */
#define PEDALDIAGTHREAD_POOL_SIZE		200
#define PEDALDIAGTHREAD_BLOCK_SIZE	200
static uint8 msgBuffer_PedaldiagThread[PEDALDIAGTHREAD_POOL_SIZE * PEDALDIAGTHREAD_BLOCK_SIZE];
static etMessageService msgService_PedaldiagThread;

/* declarations of all ActorClass instances (const and variable structs) */

/* forward declaration of variable actor structs */
static TopActor _LogSys_subSystemRef_topActor;
static FuelingSystem _LogSys_subSystemRef_topActor_FuelingSystem;
static AirMassFlowChanger _LogSys_subSystemRef_topActor_FuelingSystem_AirMassFlow;
static BassFuelMassEntity _LogSys_subSystemRef_topActor_FuelingSystem_BassFuelMass;
static TransientFuelingCompensationEntity _LogSys_subSystemRef_topActor_FuelingSystem_TransientFurlingCompensation;
static AirSystem _LogSys_subSystemRef_topActor_AirSystem;
static pedalvoter _LogSys_subSystemRef_topActor_AirSystem_pedalvoter;
static pedalfeel _LogSys_subSystemRef_topActor_AirSystem_pedalfeel;
static throttlecontroller _LogSys_subSystemRef_topActor_AirSystem_throttlecontroller;
static IgnitionSystem _LogSys_subSystemRef_topActor_IgnitionSystem;
static AirMassFlowEntity _LogSys_subSystemRef_topActor_IgnitionSystem_AirMassFlow;
static BassFuelMassEntity2 _LogSys_subSystemRef_topActor_IgnitionSystem_BassFuelMass2;
static AccelPedalSensor _LogSys_subSystemRef_topActor_AccelPedalSensor;
static ThrottleActuator _LogSys_subSystemRef_topActor_ThrottleActuator;
static InjectionActuator _LogSys_subSystemRef_topActor_InjectionActuator;
static InjectionTimingActuatorEntity _LogSys_subSystemRef_topActor_InjectionActuator_InjectionTimeActuator;
static TotalFuelingEntity _LogSys_subSystemRef_topActor_InjectionActuator_TotalFueling;
static IgnitionActuator _LogSys_subSystemRef_topActor_IgnitionActuator;
static IgnitionTimingActuatorEntity _LogSys_subSystemRef_topActor_IgnitionActuator_IgnitionTimeActuator;
static IgnitionTimingEntity _LogSys_subSystemRef_topActor_IgnitionActuator_IgnitionTiming;
static ThrottleSensor _LogSys_subSystemRef_topActor_ThrottleSensor;
static MassAirFlowSensor _LogSys_subSystemRef_topActor_MassAirFlowSensor;
static CylinerNumObserver _LogSys_subSystemRef_topActor_CylinerNumObserver;
static AccelPedalDiagEntity _LogSys_subSystemRef_topActor_PadelDiag;
static ATimingService _LogSys_subSystemRef_timingService;

/* forward declaration of variable port structs */
/* nothing to do */
static PTimerConjPort_var _LogSys_subSystemRef_topActor_FuelingSystem_timer_var={
	0,
	10000000
						};
static PTimerConjPort_var _LogSys_subSystemRef_topActor_AirSystem_timer_var={
	0,
	10000000
						};
static PTimerConjPort_var _LogSys_subSystemRef_topActor_IgnitionSystem_timer_var={
	0,
	10000000
						};
static PTimerConjPort_var _LogSys_subSystemRef_topActor_AccelPedalSensor_timer_var={
	0,
	00000000
						};
static PTimerConjPort_var _LogSys_subSystemRef_topActor_ThrottleActuator_timer_var={
	0,
	10000000
						};
static PTimerConjPort_var _LogSys_subSystemRef_topActor_InjectionActuator_timer_var={
	0,
	10000000
						};
static PTimerConjPort_var _LogSys_subSystemRef_topActor_IgnitionActuator_timer_var={
	0,
	10000000
						};
static PTimerConjPort_var _LogSys_subSystemRef_topActor_ThrottleSensor_timer_var={
	0,
	00000000
						};
static PTimerConjPort_var _LogSys_subSystemRef_topActor_MassAirFlowSensor_timer_var={
	0,
	00000000
						};
static PTimerConjPort_var _LogSys_subSystemRef_topActor_CylinerNumObserver_timer_var={
	0,
	00000000
						};
static PTimerConjPort_var _LogSys_subSystemRef_topActor_PadelDiag_timer_var={
	0,
	00000000
						};


/* instance _LogSys_subSystemRef_topActor */
static /*const*/ TopActor_const _LogSys_subSystemRef_topActor_const = {
	"/LogSys/subSystemRef/topActor"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
};
static TopActor _LogSys_subSystemRef_topActor = {
	&_LogSys_subSystemRef_topActor_const,

	/* data send ports */

	/* attributes */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_FuelingSystem */
static /*const*/ FuelingSystem_const _LogSys_subSystemRef_topActor_FuelingSystem_const = {
	"/LogSys/subSystemRef/topActor/FuelingSystem"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_AirflowThread, 79+BASE_ADDRESS, 3
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/FuelingSystem","/LogSys/subSystemRef/topActor/MassAirFlowSensor"
	#endif
	} /* Port airflowPort */
	,{NULL, &msgService_InjectactThread, 52+BASE_ADDRESS, 4
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/FuelingSystem","/LogSys/subSystemRef/topActor/InjectionActuator"
	#endif
	} /* Port injectiondata */
	,{NULL, &msgService_FuelingsysThread, 9+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/FuelingSystem","/LogSys/subSystemRef/topActor/FuelingSystem/AirMassFlow"
	#endif
	} /* Port fuelingInternalIn */
	,{NULL, &msgService_FuelingsysThread, 16+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/FuelingSystem","/LogSys/subSystemRef/topActor/FuelingSystem/TransientFurlingCompensation"
	#endif
	} /* Port fuelingInternalOut */

	/* data receive ports */

	/* saps */
	,{&_LogSys_subSystemRef_topActor_FuelingSystem_timer_var, &msgService_DefaultPhysicalThread, 89+BASE_ADDRESS, 5
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/FuelingSystem","/LogSys/subSystemRef/timingService"
	#endif
	} /* Port timer */

	/* replicated ports */

	/* services */
};
static FuelingSystem _LogSys_subSystemRef_topActor_FuelingSystem = {
	&_LogSys_subSystemRef_topActor_FuelingSystem_const,

	/* data send ports */

	/* attributes */
	0		/* recvairflowsensetime */,
	0		/* recvfirsttime */,
	0		/* airflowemer */,
	0		/* airflowscen */,
	0		/* airflowins */,
	0		/* count */,
	0		/* tempairflowsensetime */,
	0		/* tempfirsttime */,
	0		/* actor3_1_id */,
	0		/* actor3_2_id */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_FuelingSystem_AirMassFlow */
static /*const*/ AirMassFlowChanger_const _LogSys_subSystemRef_topActor_FuelingSystem_AirMassFlow_const = {
	"/LogSys/subSystemRef/topActor/FuelingSystem/AirMassFlow"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_FuelingsysThread, 5+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/FuelingSystem/AirMassFlow","/LogSys/subSystemRef/topActor/FuelingSystem"
	#endif
	} /* Port airmassdata */
	,{NULL, &msgService_FuelingsysThread, 12+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/FuelingSystem/AirMassFlow","/LogSys/subSystemRef/topActor/FuelingSystem/BassFuelMass"
	#endif
	} /* Port airmassdatasend */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
};
static AirMassFlowChanger _LogSys_subSystemRef_topActor_FuelingSystem_AirMassFlow = {
	&_LogSys_subSystemRef_topActor_FuelingSystem_AirMassFlow_const,

	/* data send ports */

	/* attributes */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_FuelingSystem_BassFuelMass */
static /*const*/ BassFuelMassEntity_const _LogSys_subSystemRef_topActor_FuelingSystem_BassFuelMass_const = {
	"/LogSys/subSystemRef/topActor/FuelingSystem/BassFuelMass"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_FuelingsysThread, 10+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/FuelingSystem/BassFuelMass","/LogSys/subSystemRef/topActor/FuelingSystem/AirMassFlow"
	#endif
	} /* Port bassfueldata */
	,{NULL, &msgService_FuelingsysThread, 15+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/FuelingSystem/BassFuelMass","/LogSys/subSystemRef/topActor/FuelingSystem/TransientFurlingCompensation"
	#endif
	} /* Port bassfueldatasend */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
};
static BassFuelMassEntity _LogSys_subSystemRef_topActor_FuelingSystem_BassFuelMass = {
	&_LogSys_subSystemRef_topActor_FuelingSystem_BassFuelMass_const,

	/* data send ports */

	/* attributes */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_FuelingSystem_TransientFurlingCompensation */
static /*const*/ TransientFuelingCompensationEntity_const _LogSys_subSystemRef_topActor_FuelingSystem_TransientFurlingCompensation_const = {
	"/LogSys/subSystemRef/topActor/FuelingSystem/TransientFurlingCompensation"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_FuelingsysThread, 13+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/FuelingSystem/TransientFurlingCompensation","/LogSys/subSystemRef/topActor/FuelingSystem/BassFuelMass"
	#endif
	} /* Port transientfueldata */
	,{NULL, &msgService_FuelingsysThread, 6+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/FuelingSystem/TransientFurlingCompensation","/LogSys/subSystemRef/topActor/FuelingSystem"
	#endif
	} /* Port transientfueldatasend */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
};
static TransientFuelingCompensationEntity _LogSys_subSystemRef_topActor_FuelingSystem_TransientFurlingCompensation = {
	&_LogSys_subSystemRef_topActor_FuelingSystem_TransientFurlingCompensation_const,

	/* data send ports */

	/* attributes */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_AirSystem */
static /*const*/ AirSystem_const _LogSys_subSystemRef_topActor_AirSystem_const = {
	"/LogSys/subSystemRef/topActor/AirSystem"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_ThrottleThread, 76+BASE_ADDRESS, 3
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/AirSystem","/LogSys/subSystemRef/topActor/ThrottleSensor"
	#endif
	} /* Port throttlePort */
	,{NULL, &msgService_ThrottleactThread, 49+BASE_ADDRESS, 4
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/AirSystem","/LogSys/subSystemRef/topActor/ThrottleActuator"
	#endif
	} /* Port throttledata */
	,{NULL, &msgService_PedalThread, 46+BASE_ADDRESS, 5
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/AirSystem","/LogSys/subSystemRef/topActor/AccelPedalSensor"
	#endif
	} /* Port padalPort */
	,{NULL, &msgService_AirsysThread, 25+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/AirSystem","/LogSys/subSystemRef/topActor/AirSystem/pedalvoter"
	#endif
	} /* Port internalpedal */
	,{NULL, &msgService_AirsysThread, 32+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/AirSystem","/LogSys/subSystemRef/topActor/AirSystem/throttlecontroller"
	#endif
	} /* Port Internalthrottle */

	/* data receive ports */

	/* saps */
	,{&_LogSys_subSystemRef_topActor_AirSystem_timer_var, &msgService_DefaultPhysicalThread, 90+BASE_ADDRESS, 6
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/AirSystem","/LogSys/subSystemRef/timingService"
	#endif
	} /* Port timer */

	/* replicated ports */

	/* services */
};
static AirSystem _LogSys_subSystemRef_topActor_AirSystem = {
	&_LogSys_subSystemRef_topActor_AirSystem_const,

	/* data send ports */

	/* attributes */
	0		/* recvthrottlesensetime */,
	0		/* recvthrottlesensefirsttime */,
	0		/* recvpedalfirsttime */,
	0		/* recvpedalsensetime */,
	0		/* pedalscen */,
	0		/* pedalins */,
	0		/* throttlescen */,
	0		/* throttleins */,
	0		/* pedalemer */,
	0		/* throttleemer */,
	0		/* count2 */,
	0		/* count3 */,
	0		/* count4 */,
	0		/* actor1_1_id */,
	0		/* actor1_2_id */,
	0		/* actor2_1_id */,
	0		/* actor2_2_id */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_AirSystem_pedalvoter */
static /*const*/ pedalvoter_const _LogSys_subSystemRef_topActor_AirSystem_pedalvoter_const = {
	"/LogSys/subSystemRef/topActor/AirSystem/pedalvoter"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_AirsysThread, 21+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/AirSystem/pedalvoter","/LogSys/subSystemRef/topActor/AirSystem"
	#endif
	} /* Port pedalvoterdata */
	,{NULL, &msgService_AirsysThread, 28+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/AirSystem/pedalvoter","/LogSys/subSystemRef/topActor/AirSystem/pedalfeel"
	#endif
	} /* Port feeldata */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
};
static pedalvoter _LogSys_subSystemRef_topActor_AirSystem_pedalvoter = {
	&_LogSys_subSystemRef_topActor_AirSystem_pedalvoter_const,

	/* data send ports */

	/* attributes */
	0		/* recvthrottlesensetime */,
	0		/* recvfirsttime */,
	0		/* recvpedalsensetime */,
	0		/* recvairsystemstarttime */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_AirSystem_pedalfeel */
static /*const*/ pedalfeel_const _LogSys_subSystemRef_topActor_AirSystem_pedalfeel_const = {
	"/LogSys/subSystemRef/topActor/AirSystem/pedalfeel"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_AirsysThread, 26+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/AirSystem/pedalfeel","/LogSys/subSystemRef/topActor/AirSystem/pedalvoter"
	#endif
	} /* Port feeldata */
	,{NULL, &msgService_AirsysThread, 31+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/AirSystem/pedalfeel","/LogSys/subSystemRef/topActor/AirSystem/throttlecontroller"
	#endif
	} /* Port feeldatasend */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
};
static pedalfeel _LogSys_subSystemRef_topActor_AirSystem_pedalfeel = {
	&_LogSys_subSystemRef_topActor_AirSystem_pedalfeel_const,

	/* data send ports */

	/* attributes */
	0		/* recvthrottlesensetime */,
	0		/* recvfirsttime */,
	0		/* recvpedalsensetime */,
	0		/* recvairsystemstarttime */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_AirSystem_throttlecontroller */
static /*const*/ throttlecontroller_const _LogSys_subSystemRef_topActor_AirSystem_throttlecontroller_const = {
	"/LogSys/subSystemRef/topActor/AirSystem/throttlecontroller"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_AirsysThread, 29+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/AirSystem/throttlecontroller","/LogSys/subSystemRef/topActor/AirSystem/pedalfeel"
	#endif
	} /* Port throttledata */
	,{NULL, &msgService_AirsysThread, 22+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/AirSystem/throttlecontroller","/LogSys/subSystemRef/topActor/AirSystem"
	#endif
	} /* Port throttledatasend */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
};
static throttlecontroller _LogSys_subSystemRef_topActor_AirSystem_throttlecontroller = {
	&_LogSys_subSystemRef_topActor_AirSystem_throttlecontroller_const,

	/* data send ports */

	/* attributes */
	0		/* recvthrottlesensetime */,
	0		/* recvfirsttime */,
	0		/* recvpedalsensetime */,
	0		/* recvairsystemstarttime */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_IgnitionSystem */
static /*const*/ IgnitionSystem_const _LogSys_subSystemRef_topActor_IgnitionSystem_const = {
	"/LogSys/subSystemRef/topActor/IgnitionSystem"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_AirflowThread, 80+BASE_ADDRESS, 3
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/IgnitionSystem","/LogSys/subSystemRef/topActor/MassAirFlowSensor"
	#endif
	} /* Port airflowPort */
	,{NULL, &msgService_IgniactThread, 64+BASE_ADDRESS, 4
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/IgnitionSystem","/LogSys/subSystemRef/topActor/IgnitionActuator"
	#endif
	} /* Port ignitiondata */
	,{NULL, &msgService_IgnitionsysThread, 40+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/IgnitionSystem","/LogSys/subSystemRef/topActor/IgnitionSystem/AirMassFlow"
	#endif
	} /* Port ignitionInternalIn */
	,{NULL, &msgService_IgnitionsysThread, 44+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/IgnitionSystem","/LogSys/subSystemRef/topActor/IgnitionSystem/BassFuelMass2"
	#endif
	} /* Port ignitionInternalOut */

	/* data receive ports */

	/* saps */
	,{&_LogSys_subSystemRef_topActor_IgnitionSystem_timer_var, &msgService_DefaultPhysicalThread, 91+BASE_ADDRESS, 5
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/IgnitionSystem","/LogSys/subSystemRef/timingService"
	#endif
	} /* Port timer */

	/* replicated ports */

	/* services */
};
static IgnitionSystem _LogSys_subSystemRef_topActor_IgnitionSystem = {
	&_LogSys_subSystemRef_topActor_IgnitionSystem_const,

	/* data send ports */

	/* attributes */
	0		/* priority */,
	0		/* priority2 */,
	0		/* recvfirsttime */,
	0		/* recvairflowsensetime */,
	0		/* airflowemer */,
	0		/* airflowscen */,
	0		/* airflowins */,
	0		/* actor3_1_id */,
	0		/* actor3_2_id */,
	0		/* count */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_IgnitionSystem_AirMassFlow */
static /*const*/ AirMassFlowEntity_const _LogSys_subSystemRef_topActor_IgnitionSystem_AirMassFlow_const = {
	"/LogSys/subSystemRef/topActor/IgnitionSystem/AirMassFlow"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_IgnitionsysThread, 36+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/IgnitionSystem/AirMassFlow","/LogSys/subSystemRef/topActor/IgnitionSystem"
	#endif
	} /* Port massflowdata */
	,{NULL, &msgService_IgnitionsysThread, 43+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/IgnitionSystem/AirMassFlow","/LogSys/subSystemRef/topActor/IgnitionSystem/BassFuelMass2"
	#endif
	} /* Port massflowdatasend */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
};
static AirMassFlowEntity _LogSys_subSystemRef_topActor_IgnitionSystem_AirMassFlow = {
	&_LogSys_subSystemRef_topActor_IgnitionSystem_AirMassFlow_const,

	/* data send ports */

	/* attributes */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_IgnitionSystem_BassFuelMass2 */
static /*const*/ BassFuelMassEntity2_const _LogSys_subSystemRef_topActor_IgnitionSystem_BassFuelMass2_const = {
	"/LogSys/subSystemRef/topActor/IgnitionSystem/BassFuelMass2"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_IgnitionsysThread, 41+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/IgnitionSystem/BassFuelMass2","/LogSys/subSystemRef/topActor/IgnitionSystem/AirMassFlow"
	#endif
	} /* Port bassfueldata2 */
	,{NULL, &msgService_IgnitionsysThread, 37+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/IgnitionSystem/BassFuelMass2","/LogSys/subSystemRef/topActor/IgnitionSystem"
	#endif
	} /* Port bassfueldatasend2 */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
};
static BassFuelMassEntity2 _LogSys_subSystemRef_topActor_IgnitionSystem_BassFuelMass2 = {
	&_LogSys_subSystemRef_topActor_IgnitionSystem_BassFuelMass2_const,

	/* data send ports */

	/* attributes */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_AccelPedalSensor */
static /*const*/ AccelPedalSensor_const _LogSys_subSystemRef_topActor_AccelPedalSensor_const = {
	"/LogSys/subSystemRef/topActor/AccelPedalSensor"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_AirsysThread, 20+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/AccelPedalSensor","/LogSys/subSystemRef/topActor/AirSystem"
	#endif
	} /* Port pedaldata */

	/* data receive ports */

	/* saps */
	,{&_LogSys_subSystemRef_topActor_AccelPedalSensor_timer_var, &msgService_DefaultPhysicalThread, 92+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/AccelPedalSensor","/LogSys/subSystemRef/timingService"
	#endif
	} /* Port timer */

	/* replicated ports */

	/* services */
};
static AccelPedalSensor _LogSys_subSystemRef_topActor_AccelPedalSensor = {
	&_LogSys_subSystemRef_topActor_AccelPedalSensor_const,

	/* data send ports */

	/* attributes */
	0		/* count */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_ThrottleActuator */
static /*const*/ ThrottleActuator_const _LogSys_subSystemRef_topActor_ThrottleActuator_const = {
	"/LogSys/subSystemRef/topActor/ThrottleActuator"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_AirsysThread, 19+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/ThrottleActuator","/LogSys/subSystemRef/topActor/AirSystem"
	#endif
	} /* Port throttlePort */

	/* data receive ports */

	/* saps */
	,{&_LogSys_subSystemRef_topActor_ThrottleActuator_timer_var, &msgService_DefaultPhysicalThread, 93+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/ThrottleActuator","/LogSys/subSystemRef/timingService"
	#endif
	} /* Port timer */

	/* replicated ports */

	/* services */
};
static ThrottleActuator _LogSys_subSystemRef_topActor_ThrottleActuator = {
	&_LogSys_subSystemRef_topActor_ThrottleActuator_const,

	/* data send ports */

	/* attributes */
	0		/* recvscenarioID */,
	0		/* recvinstanceID */,
	0		/* recvemer */,
	0		/* count */,
	0		/* recvairsystemstarttime */,
	0		/* recvthrottlesensetime */,
	0		/* recvfirsttime */,
	0		/* recvpedalsensetime */,
	0		/* recvpedalvotertime */,
	0		/* recvpedalfeeltime */,
	0		/* recvthrottlecontrollertime */,
	0		/* recvairsystemtime */,
	0		/* recvairsystemtime2 */,
	0		/* thtacttime */,
	0		/* actor5_1_id */,
	0		/* actor5_2_id */,
	0		/* actor5_3_id */,
	0		/* actor5_4_id */,
	0		/* actor5_5_id */,
	0		/* actor5_6_id */,
	0		/* actor8_1_id */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_InjectionActuator */
static /*const*/ InjectionActuator_const _LogSys_subSystemRef_topActor_InjectionActuator_const = {
	"/LogSys/subSystemRef/topActor/InjectionActuator"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_FuelingsysThread, 4+BASE_ADDRESS, 3
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/InjectionActuator","/LogSys/subSystemRef/topActor/FuelingSystem"
	#endif
	} /* Port injectionPort */
	,{NULL, &msgService_InjectactThread, 83+BASE_ADDRESS, 4
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/InjectionActuator","/LogSys/subSystemRef/topActor/CylinerNumObserver"
	#endif
	} /* Port cylinerData */
	,{NULL, &msgService_InjectactThread, 61+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/InjectionActuator","/LogSys/subSystemRef/topActor/InjectionActuator/TotalFueling"
	#endif
	} /* Port injectionactorInternalIn */
	,{NULL, &msgService_InjectactThread, 59+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/InjectionActuator","/LogSys/subSystemRef/topActor/InjectionActuator/InjectionTimeActuator"
	#endif
	} /* Port injectionactorInternalOut */

	/* data receive ports */

	/* saps */
	,{&_LogSys_subSystemRef_topActor_InjectionActuator_timer_var, &msgService_DefaultPhysicalThread, 94+BASE_ADDRESS, 5
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/InjectionActuator","/LogSys/subSystemRef/timingService"
	#endif
	} /* Port timer */

	/* replicated ports */

	/* services */
};
static InjectionActuator _LogSys_subSystemRef_topActor_InjectionActuator = {
	&_LogSys_subSystemRef_topActor_InjectionActuator_const,

	/* data send ports */

	/* attributes */
	0		/* recvscenarioID */,
	0		/* recvinstanceID */,
	0		/* recvemer */,
	0		/* count */,
	0		/* count2 */,
	0		/* recvfuelingsystemtime */,
	0		/* recvfuelingsystemtime2 */,
	0		/* recvcylinertime */,
	0		/* recvairmasstime */,
	0		/* recvbassairtime */,
	0		/* recvtransientfueltime */,
	0		/* recvtotalfueltime */,
	0		/* recvinjectionactuatortime */,
	0		/* injectionacttime */,
	0		/* injectionacttime2 */,
	0		/* injectionacttime3 */,
	0		/* injectionstarttime */,
	0		/* actor6_1_id */,
	0		/* actor6_2_id */,
	0		/* actor6_3_id */,
	0		/* actor6_4_id */,
	0		/* actor6_5_id */,
	0		/* actor6_6_id */,
	0		/* actor9_1_id */,
	0		/* actor9_2_id */,
	0		/* actor9_3_id */,
	0		/* actor9_4_id */,
	0		/* actor9_5_id */,
	0		/* actor9_6_id */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_InjectionActuator_InjectionTimeActuator */
static /*const*/ InjectionTimingActuatorEntity_const _LogSys_subSystemRef_topActor_InjectionActuator_InjectionTimeActuator_const = {
	"/LogSys/subSystemRef/topActor/InjectionActuator/InjectionTimeActuator"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_InjectactThread, 62+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/InjectionActuator/InjectionTimeActuator","/LogSys/subSystemRef/topActor/InjectionActuator/TotalFueling"
	#endif
	} /* Port Injectionactordata */
	,{NULL, &msgService_InjectactThread, 55+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/InjectionActuator/InjectionTimeActuator","/LogSys/subSystemRef/topActor/InjectionActuator"
	#endif
	} /* Port Injectionactordatasend */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
};
static InjectionTimingActuatorEntity _LogSys_subSystemRef_topActor_InjectionActuator_InjectionTimeActuator = {
	&_LogSys_subSystemRef_topActor_InjectionActuator_InjectionTimeActuator_const,

	/* data send ports */

	/* attributes */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_InjectionActuator_TotalFueling */
static /*const*/ TotalFuelingEntity_const _LogSys_subSystemRef_topActor_InjectionActuator_TotalFueling_const = {
	"/LogSys/subSystemRef/topActor/InjectionActuator/TotalFueling"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_InjectactThread, 54+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/InjectionActuator/TotalFueling","/LogSys/subSystemRef/topActor/InjectionActuator"
	#endif
	} /* Port totalfueldata */
	,{NULL, &msgService_InjectactThread, 58+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/InjectionActuator/TotalFueling","/LogSys/subSystemRef/topActor/InjectionActuator/InjectionTimeActuator"
	#endif
	} /* Port totalfueldatasend */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
};
static TotalFuelingEntity _LogSys_subSystemRef_topActor_InjectionActuator_TotalFueling = {
	&_LogSys_subSystemRef_topActor_InjectionActuator_TotalFueling_const,

	/* data send ports */

	/* attributes */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_IgnitionActuator */
static /*const*/ IgnitionActuator_const _LogSys_subSystemRef_topActor_IgnitionActuator_const = {
	"/LogSys/subSystemRef/topActor/IgnitionActuator"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_IgnitionsysThread, 35+BASE_ADDRESS, 3
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/IgnitionActuator","/LogSys/subSystemRef/topActor/IgnitionSystem"
	#endif
	} /* Port ignitionPort */
	,{NULL, &msgService_InjectactThread, 84+BASE_ADDRESS, 4
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/IgnitionActuator","/LogSys/subSystemRef/topActor/CylinerNumObserver"
	#endif
	} /* Port cylinerData */
	,{NULL, &msgService_IgniactThread, 73+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/IgnitionActuator","/LogSys/subSystemRef/topActor/IgnitionActuator/IgnitionTiming"
	#endif
	} /* Port igntionactorInternalIn */
	,{NULL, &msgService_IgniactThread, 71+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/IgnitionActuator","/LogSys/subSystemRef/topActor/IgnitionActuator/IgnitionTimeActuator"
	#endif
	} /* Port ignitionactorInternalOut */

	/* data receive ports */

	/* saps */
	,{&_LogSys_subSystemRef_topActor_IgnitionActuator_timer_var, &msgService_DefaultPhysicalThread, 95+BASE_ADDRESS, 5
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/IgnitionActuator","/LogSys/subSystemRef/timingService"
	#endif
	} /* Port timer */

	/* replicated ports */

	/* services */
};
static IgnitionActuator _LogSys_subSystemRef_topActor_IgnitionActuator = {
	&_LogSys_subSystemRef_topActor_IgnitionActuator_const,

	/* data send ports */

	/* attributes */
	0		/* recvscenarioID */,
	0		/* recvinstanceID */,
	0		/* recvemer */,
	0		/* count */,
	0		/* count2 */,
	0		/* recvairmasstime */,
	0		/* recvignitiontiming */,
	0		/* recvfirsttime */,
	0		/* recvairflowsensetime */,
	0		/* recvignitionsystemtime */,
	0		/* recvignitionsystemtime2 */,
	0		/* recvcylinertime */,
	0		/* recvbassfueltime */,
	0		/* ignitionacttime */,
	0		/* ignitionacttime2 */,
	0		/* ignitionacttime3 */,
	0		/* ignitionstarttime */,
	0		/* recvignitiontimingtime */,
	0		/* actor7_1_id */,
	0		/* actor7_2_id */,
	0		/* actor7_3_id */,
	0		/* actor7_4_id */,
	0		/* actor7_5_id */,
	0		/* actor10_1_id */,
	0		/* actor10_2_id */,
	0		/* actor10_3_id */,
	0		/* actor10_4_id */,
	0		/* actor10_5_id */,
	0		/* actor10_6_id */,
	0		/* priority */,
	0		/* priority2 */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_IgnitionActuator_IgnitionTimeActuator */
static /*const*/ IgnitionTimingActuatorEntity_const _LogSys_subSystemRef_topActor_IgnitionActuator_IgnitionTimeActuator_const = {
	"/LogSys/subSystemRef/topActor/IgnitionActuator/IgnitionTimeActuator"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_IgniactThread, 74+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/IgnitionActuator/IgnitionTimeActuator","/LogSys/subSystemRef/topActor/IgnitionActuator/IgnitionTiming"
	#endif
	} /* Port ignitionactordata */
	,{NULL, &msgService_IgniactThread, 67+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/IgnitionActuator/IgnitionTimeActuator","/LogSys/subSystemRef/topActor/IgnitionActuator"
	#endif
	} /* Port ignitionactordatasend */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
};
static IgnitionTimingActuatorEntity _LogSys_subSystemRef_topActor_IgnitionActuator_IgnitionTimeActuator = {
	&_LogSys_subSystemRef_topActor_IgnitionActuator_IgnitionTimeActuator_const,

	/* data send ports */

	/* attributes */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_IgnitionActuator_IgnitionTiming */
static /*const*/ IgnitionTimingEntity_const _LogSys_subSystemRef_topActor_IgnitionActuator_IgnitionTiming_const = {
	"/LogSys/subSystemRef/topActor/IgnitionActuator/IgnitionTiming"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_IgniactThread, 66+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/IgnitionActuator/IgnitionTiming","/LogSys/subSystemRef/topActor/IgnitionActuator"
	#endif
	} /* Port ignitiontimingdata */
	,{NULL, &msgService_IgniactThread, 70+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/IgnitionActuator/IgnitionTiming","/LogSys/subSystemRef/topActor/IgnitionActuator/IgnitionTimeActuator"
	#endif
	} /* Port ignitiontimingdatasend */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
};
static IgnitionTimingEntity _LogSys_subSystemRef_topActor_IgnitionActuator_IgnitionTiming = {
	&_LogSys_subSystemRef_topActor_IgnitionActuator_IgnitionTiming_const,

	/* data send ports */

	/* attributes */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_ThrottleSensor */
static /*const*/ ThrottleSensor_const _LogSys_subSystemRef_topActor_ThrottleSensor_const = {
	"/LogSys/subSystemRef/topActor/ThrottleSensor"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_AirsysThread, 18+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/ThrottleSensor","/LogSys/subSystemRef/topActor/AirSystem"
	#endif
	} /* Port throttledata */

	/* data receive ports */

	/* saps */
	,{&_LogSys_subSystemRef_topActor_ThrottleSensor_timer_var, &msgService_DefaultPhysicalThread, 96+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/ThrottleSensor","/LogSys/subSystemRef/timingService"
	#endif
	} /* Port timer */

	/* replicated ports */

	/* services */
};
static ThrottleSensor _LogSys_subSystemRef_topActor_ThrottleSensor = {
	&_LogSys_subSystemRef_topActor_ThrottleSensor_const,

	/* data send ports */

	/* attributes */
	0		/* count */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_MassAirFlowSensor */
static /*const*/ MassAirFlowSensor_const _LogSys_subSystemRef_topActor_MassAirFlowSensor_const = {
	"/LogSys/subSystemRef/topActor/MassAirFlowSensor"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_FuelingsysThread, 3+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/MassAirFlowSensor","/LogSys/subSystemRef/topActor/FuelingSystem"
	#endif
	} /* Port airflowdata */
	,{NULL, &msgService_IgnitionsysThread, 34+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/MassAirFlowSensor","/LogSys/subSystemRef/topActor/IgnitionSystem"
	#endif
	} /* Port airflowdata2 */

	/* data receive ports */

	/* saps */
	,{&_LogSys_subSystemRef_topActor_MassAirFlowSensor_timer_var, &msgService_DefaultPhysicalThread, 97+BASE_ADDRESS, 3
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/MassAirFlowSensor","/LogSys/subSystemRef/timingService"
	#endif
	} /* Port timer */

	/* replicated ports */

	/* services */
};
static MassAirFlowSensor _LogSys_subSystemRef_topActor_MassAirFlowSensor = {
	&_LogSys_subSystemRef_topActor_MassAirFlowSensor_const,

	/* data send ports */

	/* attributes */
	0		/* count */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_CylinerNumObserver */
static /*const*/ CylinerNumObserver_const _LogSys_subSystemRef_topActor_CylinerNumObserver_const = {
	"/LogSys/subSystemRef/topActor/CylinerNumObserver"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_InjectactThread, 53+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/CylinerNumObserver","/LogSys/subSystemRef/topActor/InjectionActuator"
	#endif
	} /* Port cylinernum1Port */
	,{NULL, &msgService_IgniactThread, 65+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/CylinerNumObserver","/LogSys/subSystemRef/topActor/IgnitionActuator"
	#endif
	} /* Port cylinernum2Port */

	/* data receive ports */

	/* saps */
	,{&_LogSys_subSystemRef_topActor_CylinerNumObserver_timer_var, &msgService_DefaultPhysicalThread, 98+BASE_ADDRESS, 3
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/CylinerNumObserver","/LogSys/subSystemRef/timingService"
	#endif
	} /* Port timer */

	/* replicated ports */

	/* services */
};
static CylinerNumObserver _LogSys_subSystemRef_topActor_CylinerNumObserver = {
	&_LogSys_subSystemRef_topActor_CylinerNumObserver_const,

	/* data send ports */

	/* attributes */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_topActor_PadelDiag */
static /*const*/ AccelPedalDiagEntity_const _LogSys_subSystemRef_topActor_PadelDiag_const = {
	"/LogSys/subSystemRef/topActor/PadelDiag"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */

	/* data receive ports */

	/* saps */
	,{&_LogSys_subSystemRef_topActor_PadelDiag_timer_var, &msgService_DefaultPhysicalThread, 99+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/topActor/PadelDiag","/LogSys/subSystemRef/timingService"
	#endif
	} /* Port timer */

	/* replicated ports */

	/* services */
};
static AccelPedalDiagEntity _LogSys_subSystemRef_topActor_PadelDiag = {
	&_LogSys_subSystemRef_topActor_PadelDiag_const,

	/* data send ports */

	/* attributes */
	0		/* count */,
	0		/* actor4_1_id */

	/* state and history are initialized in init function */
};

/* instance _LogSys_subSystemRef_timingService */
static const etReplSubPort _LogSys_subSystemRef_timingService_repl_sub_ports[11] = {
	/* Replicated Sub Ports: {varData, msgService, peerAddress, localId, index} */
	{{NULL,&msgService_FuelingsysThread, 7+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/timingService"
	,"/LogSys/subSystemRef/topActor/FuelingSystem"
	#endif
	},0}, /* Repl Sub Port timer idx +0*/
	{{NULL,&msgService_AirsysThread, 23+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/timingService"
	,"/LogSys/subSystemRef/topActor/AirSystem"
	#endif
	},1}, /* Repl Sub Port timer idx +1*/
	{{NULL,&msgService_IgnitionsysThread, 38+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/timingService"
	,"/LogSys/subSystemRef/topActor/IgnitionSystem"
	#endif
	},2}, /* Repl Sub Port timer idx +2*/
	{{NULL,&msgService_PedalThread, 47+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/timingService"
	,"/LogSys/subSystemRef/topActor/AccelPedalSensor"
	#endif
	},3}, /* Repl Sub Port timer idx +3*/
	{{NULL,&msgService_ThrottleactThread, 50+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/timingService"
	,"/LogSys/subSystemRef/topActor/ThrottleActuator"
	#endif
	},4}, /* Repl Sub Port timer idx +4*/
	{{NULL,&msgService_InjectactThread, 56+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/timingService"
	,"/LogSys/subSystemRef/topActor/InjectionActuator"
	#endif
	},5}, /* Repl Sub Port timer idx +5*/
	{{NULL,&msgService_IgniactThread, 68+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/timingService"
	,"/LogSys/subSystemRef/topActor/IgnitionActuator"
	#endif
	},6}, /* Repl Sub Port timer idx +6*/
	{{NULL,&msgService_ThrottleThread, 77+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/timingService"
	,"/LogSys/subSystemRef/topActor/ThrottleSensor"
	#endif
	},7}, /* Repl Sub Port timer idx +7*/
	{{NULL,&msgService_AirflowThread, 81+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/timingService"
	,"/LogSys/subSystemRef/topActor/MassAirFlowSensor"
	#endif
	},8}, /* Repl Sub Port timer idx +8*/
	{{NULL,&msgService_InjectactThread, 85+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/timingService"
	,"/LogSys/subSystemRef/topActor/CylinerNumObserver"
	#endif
	},9}, /* Repl Sub Port timer idx +9*/
	{{NULL,&msgService_PedaldiagThread, 87+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/LogSys/subSystemRef/timingService"
	,"/LogSys/subSystemRef/topActor/PadelDiag"
	#endif
	},10} /* Repl Sub Port timer idx +10*/
};
static /*const*/ ATimingService_const _LogSys_subSystemRef_timingService_const = {
	"/LogSys/subSystemRef/timingService"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
	,{11, _LogSys_subSystemRef_timingService_repl_sub_ports+0}
};
static ATimingService _LogSys_subSystemRef_timingService = {
	&_LogSys_subSystemRef_timingService_const,

	/* data send ports */

	/* attributes */
	{ {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL} } 		/* tcbs[30] */,
	NULL		/* usedTcbsRoot */,
	NULL		/* freeTcbsRoot */

	/* state and history are initialized in init function */
};

