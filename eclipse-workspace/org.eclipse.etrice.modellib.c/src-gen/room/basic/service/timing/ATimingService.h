/**
 * @author generated by eTrice
 *
 * Header File of ActorClass ATimingService
 *
 */

#ifndef _ROOM_BASIC_SERVICE_TIMING_ATIMINGSERVICE_H_
#define _ROOM_BASIC_SERVICE_TIMING_ATIMINGSERVICE_H_

#include "etDatatypes.h"
#include "messaging/etMessage.h"

#include "room/basic/service/timing/PTimer.h"

/*--------------------- begin user code ---------------------*/
#include "osal/etTime.h" 
#define ET_NB_OF_TCBS 30
typedef struct etTCB etTimerControlBlock; 
struct etTCB {
	etTime expTime;
	etTime pTime;
	int32 portIdx;
	etTimerControlBlock* next;
	};
/*--------------------- end user code ---------------------*/

typedef struct ATimingService ATimingService;

/* const part of ActorClass (ROM) */
typedef struct ATimingService_const {
	const char* instName;

	/* simple ports */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
	const etReplPort timer;
} ATimingService_const;


/* constant for state machine data */
#define ATIMINGSERVICE_HISTORY_SIZE 2

/* variable part of ActorClass (RAM) */
struct ATimingService {
	const ATimingService_const* const constData;

	/* data send ports */

	/*--------------------- attributes ---------------------*/
	 etTimerControlBlock tcbs[30]
	;
	 etTimerControlBlock* usedTcbsRoot;
	 etTimerControlBlock* freeTcbsRoot;


	/* state machine variables */
	etInt16 state;
	etInt16 history[ATIMINGSERVICE_HISTORY_SIZE];
};

void ATimingService_init(ATimingService* self);

void ATimingService_receiveMessage(void* self, const void* ifitem, const etMessage* msg);

void ATimingService_execute(ATimingService* self);

/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/
 void ATimingService_returnTcb(ATimingService* self, etTimerControlBlock* block);
 void ATimingService_putTcbToUsedList(ATimingService* self, etTimerControlBlock* block);
 void ATimingService_addTime(ATimingService* self, etTime* t1, etTime* t2);
 etTimerControlBlock* ATimingService_getTcb(ATimingService* self);
 void ATimingService_removeTcbFromUsedList(ATimingService* self, int32 idx);
 bool ATimingService_isTimeGreater(ATimingService* self, etTime* t1, etTime* t2);

/*--------------------- begin user code ---------------------*/
/*uc2*/
/*--------------------- end user code ---------------------*/

#endif /* _ROOM_BASIC_SERVICE_TIMING_ATIMINGSERVICE_H_ */

