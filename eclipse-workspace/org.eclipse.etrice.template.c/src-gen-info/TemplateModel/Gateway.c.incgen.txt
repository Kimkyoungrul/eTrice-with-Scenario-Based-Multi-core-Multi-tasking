/**
 * @author generated by eTrice
 *
 * Source File of ActorClass Gateway
 *
 */

#include "Gateway.h"

#include "modelbase/etActor.h"
#include "debugging/etLogger.h"
#include "debugging/etMSCLogger.h"
#include "etUnit/etUnit.h"
#include "base/etMemory.h"

#include "TemplateModel/PSendData.h"
#include "room/basic/service/timing/PTimer.h"
#include "TemplateModel/SendData.h"

#include "Gateway_Utils.h"


/* interface item IDs */
enum interface_items {
	IFITEM_receiveActuator = 1,
	IFITEM_dataPort = 2,
	IFITEM_timer = 3
};

/* state IDs */
enum state_ids {
	NO_STATE = 0,
	STATE_TOP = 1,
	STATE_ADASSensor = 2,
	STATE_veloupdate = 3,
	STATE_colliderupdate = 4,
	STATE_MAX = 5
};

/* transition chains */
enum ChainIDs {
	CHAIN_TRANS_INITIAL_TO__ADASSensor = 1,
	CHAIN_TRANS_tr0_FROM_ADASSensor_TO_cp0_BY_sendDatareceiveActuator = 2,
	CHAIN_TRANS_tr3_FROM_veloupdate_TO_ADASSensor_BY_timeouttimer = 3,
	CHAIN_TRANS_tr4_FROM_colliderupdate_TO_ADASSensor_BY_timeouttimer = 4
};

/* triggers */
enum triggers {
	POLLING = 0,
	TRIG_receiveActuator__sendData = IFITEM_receiveActuator + EVT_SHIFT*PSendData_IN_sendData,
	TRIG_dataPort__recursive2 = IFITEM_dataPort + EVT_SHIFT*SendData_OUT_recursive2,
	TRIG_timer__timeout = IFITEM_timer + EVT_SHIFT*PTimer_OUT_timeout
};

/* state names */
static char* stateStrings[] = {"<no state>","<top>","ADASSensor",
"veloupdate",
"colliderupdate"
};

static void setState(Gateway* self, etInt16 new_state) {
	self->state = new_state;
	ET_MSC_LOGGER_CHANGE_STATE(self->constData->instName, stateStrings[new_state])
}

static etInt16 getState(Gateway* self) {
	return self->state;
}

/* Entry and Exit Codes */
static void entry_ADASSensor(Gateway* self) {
	// 3. gateway -> Controller
	//DDataBuffer buf;
	//strcpy(buf.buffer, str2);
	//dataPortA.sendData(&buf);
	ADASMessage ADASmessage;
	if(trafficlightCount>150){
	if(trafficlight>0){
	trafficlight=-2.08f;
	}
	else if(trafficlight<0){
	trafficlight=2.08f;
	}
	trafficlightCount=0;
	}
	sprintf(velocity_str,"%.2f",velocity);
	sprintf(distance_str,"%.2f",distance);
	sprintf(colliderNum_str,"%d",colliderNum);
	sprintf(steering_str,"%.2f",steering);
	sprintf(trafficlight_str,"%.2f",trafficlight);
	strcpy(str1,velocity_str);
	strcat(str1,",");
	strcat(str1,distance_str);
	strcat(str1,",");
	strcat(str1,colliderNum_str);
	strcat(str1,",");
	strcat(str1,steering_str);
	strcat(str1,",");
	strcat(str1,trafficlight_str);
	strcpy(ADASmessage.message, str1);
	trafficlightCount+=1;
	printf("%s\n",str1);
	fflush(stdout);
	dataPort_sendData_broadcast(&ADASmessage);
	//dataPort.recursive();
}
static void entry_veloupdate(Gateway* self) {
	updatevelocity=atof(update_data);
	if(updatevelocity==0){
	velocity=0;
	}
	else{
	velocity+=updatevelocity;
	}
	if(velocity>0&&velocity<10){
	distance-=0.4;
	}
	else if(velocity>=10&&velocity<20){
	distance-=0.5;
	}
	else if(velocity>=20&&velocity<30){
	distance-=0.6;
	}
	else if(velocity>=30&&velocity<40){
	distance-=0.7;
	}
	else if(velocity>=40&&velocity<50){
	distance-=0.8;
	}
	else if(velocity>=50){
	distance-=0.9;
	}
	timer_startTimeout(0);
}
static void entry_colliderupdate(Gateway* self) {
	// 2. client -> server
	// when it first send usless data
	// 5. client -> server(changed data by ADAS)
	//sendPayloadString(str1);
	colliderNum=atoi(update_data);
	if(tempcollider!=colliderNum){
	tempcollider=colliderNum;
	distance=180;
	}
	timer_startTimeout(0);
}

/* Action Codes */
static void action_TRANS_INITIAL_TO__ADASSensor(Gateway* self) {
    velocity=0;
    distance=180;
    colliderNum=1;
    tempcollider=-1;
    trafficlightCount=0;
    trafficlight = 2.08;
    trafficeindex=0;
    steering=0.0000;
}
static void action_TRANS_tr0_FROM_ADASSensor_TO_cp0_BY_sendDatareceiveActuator(Gateway* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    strcpy(str2, data->buffer);
    receiveActuator_recursive_broadcast();
    //printf("inside the actuator str: %s\n", str2);
    //fflush(stdout);
    char *ptr;
    ptr=strtok(str2, ",");
    strcpy(situation_code,ptr);
    ptr=strtok(NULL, ",");
    strcpy(update_data,ptr);
    //printf("inside the actuator situation: %s\n", situation_code);
    //fflush(stdout);
}

/* State Switch Methods */
/**
 * calls exit codes while exiting from the current state to one of its
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(Gateway* self, etInt16 current__et, etInt16 to) {
	while (current__et!=to) {
		switch (current__et) {
			case STATE_ADASSensor:
				self->history[STATE_TOP] = STATE_ADASSensor;
				current__et = STATE_TOP;
				break;
			case STATE_veloupdate:
				self->history[STATE_TOP] = STATE_veloupdate;
				current__et = STATE_TOP;
				break;
			case STATE_colliderupdate:
				self->history[STATE_TOP] = STATE_colliderupdate;
				current__et = STATE_TOP;
				break;
			default:
				/* should not occur */
				break;
		}
	}
}

/**
 * calls action, entry and exit codes along a transition chain. The generic data are cast to typed data
 * matching the trigger of this chain. The ID of the final state is returned
 * @param chain__et - the chain ID
 * @param generic_data__et - the generic data pointer
 * @return the +/- ID of the final state either with a positive sign, that indicates to execute the state's entry code, or a negative sign vice versa
 */
static etInt16 executeTransitionChain(Gateway* self, int chain__et, const InterfaceItemBase* ifitem, void* generic_data__et) {
	switch (chain__et) {
		case CHAIN_TRANS_INITIAL_TO__ADASSensor:
		{
			action_TRANS_INITIAL_TO__ADASSensor(self);
			return STATE_ADASSensor;
		}
		case CHAIN_TRANS_tr0_FROM_ADASSensor_TO_cp0_BY_sendDatareceiveActuator:
		{
			ADASMessage* data = ((ADASMessage*) generic_data__et);
			action_TRANS_tr0_FROM_ADASSensor_TO_cp0_BY_sendDatareceiveActuator(self, ifitem, data);
			if (!strcmp(situation_code,"c")) {
			return STATE_colliderupdate;}
			else {
			return STATE_veloupdate;}
		}
		case CHAIN_TRANS_tr3_FROM_veloupdate_TO_ADASSensor_BY_timeouttimer:
		{
			return STATE_ADASSensor;
		}
		case CHAIN_TRANS_tr4_FROM_colliderupdate_TO_ADASSensor_BY_timeouttimer:
		{
			return STATE_ADASSensor;
		}
			default:
				/* should not occur */
				break;
	}
	return NO_STATE;
}

/**
 * calls entry codes while entering a state's history. The ID of the final leaf state is returned
 * @param state__et - the state which is entered
 * @return - the ID of the final leaf state
 */
static etInt16 enterHistory(Gateway* self, etInt16 state__et) {
	etBool skip_entry__et = ET_FALSE;
	if (state__et >= STATE_MAX) {
		state__et = (etInt16) (state__et - STATE_MAX);
		skip_entry__et = ET_TRUE;
	}
	while (ET_TRUE) {
		switch (state__et) {
			case STATE_ADASSensor:
				if (!(skip_entry__et)) entry_ADASSensor(self);
				/* in leaf state: return state id */
				return STATE_ADASSensor;
			case STATE_veloupdate:
				if (!(skip_entry__et)) entry_veloupdate(self);
				/* in leaf state: return state id */
				return STATE_veloupdate;
			case STATE_colliderupdate:
				if (!(skip_entry__et)) entry_colliderupdate(self);
				/* in leaf state: return state id */
				return STATE_colliderupdate;
			case STATE_TOP:
				state__et = self->history[STATE_TOP];
				break;
			default:
				/* should not occur */
				break;
		}
		skip_entry__et = ET_FALSE;
	}
	/* return NO_STATE; // required by CDT but detected as unreachable by JDT because of while (true) */
}

static void Gateway_executeInitTransition(Gateway* self) {
	int chain__et = CHAIN_TRANS_INITIAL_TO__ADASSensor;
	etInt16 next__et = executeTransitionChain(self, chain__et, NULL, NULL);
	next__et = enterHistory(self, next__et);
	setState(self, next__et);
}

/* receiveEvent contains the main implementation of the FSM */
static void Gateway_receiveEventInternal(Gateway* self, InterfaceItemBase* ifitem, int localId, int evt, void* generic_data__et) {
	int trigger__et = localId + EVT_SHIFT*evt;
	int chain__et = NOT_CAUGHT;
	etInt16 catching_state__et = NO_STATE;
	((void)trigger__et);	/* avoids unused warning */

	if (!handleSystemEvent(ifitem, evt, generic_data__et)) {
		switch (getState(self)) {
		    case STATE_ADASSensor:
		        switch(trigger__et) {
		                case TRIG_receiveActuator__sendData:
		                    {
		                        chain__et = CHAIN_TRANS_tr0_FROM_ADASSensor_TO_cp0_BY_sendDatareceiveActuator;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                default:
		                    /* should not occur */
		                    break;
		        }
		        break;
		    case STATE_veloupdate:
		        switch(trigger__et) {
		                case TRIG_timer__timeout:
		                    {
		                        chain__et = CHAIN_TRANS_tr3_FROM_veloupdate_TO_ADASSensor_BY_timeouttimer;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                default:
		                    /* should not occur */
		                    break;
		        }
		        break;
		    case STATE_colliderupdate:
		        switch(trigger__et) {
		                case TRIG_timer__timeout:
		                    {
		                        chain__et = CHAIN_TRANS_tr4_FROM_colliderupdate_TO_ADASSensor_BY_timeouttimer;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                default:
		                    /* should not occur */
		                    break;
		        }
		        break;
		    default:
		        /* should not occur */
		        break;
		}
	}
	if (chain__et != NOT_CAUGHT) {
		exitTo(self, getState(self), catching_state__et);
		{
			etInt16 next__et = executeTransitionChain(self, chain__et, ifitem, generic_data__et);
			next__et = enterHistory(self, next__et);
			setState(self, next__et);
		}
	}
}
static void Gateway_receiveEvent(Gateway* self, InterfaceItemBase* ifitem, int evt, void* generic_data__et) {
	int localId = (ifitem==NULL)? 0 : ifitem->localId;
	Gateway_receiveEventInternal(self, ifitem, localId, evt, generic_data__et);
}

void Gateway_init(Gateway* self){
	ET_MSC_LOGGER_SYNC_ENTRY("Gateway", "init")
	self->state = STATE_TOP;
	{
		int i;
		for (i=0; i<GATEWAY_HISTORY_SIZE; ++i)
			self->history[i] = NO_STATE;
	}
	Gateway_executeInitTransition(self);
	ET_MSC_LOGGER_SYNC_EXIT
}


void Gateway_receiveMessage(void* self, const void* ifitem, const etMessage* msg){
	ET_MSC_LOGGER_SYNC_ENTRY("Gateway", "_receiveMessage")
	Gateway_receiveEvent(self, (etPort*)ifitem, msg->evtID, (void*)(((char*)msg)+MEM_CEIL(sizeof(etMessage))));

	ET_MSC_LOGGER_SYNC_EXIT
}


/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/

