/**
 * @author generated by eTrice
 *
 * Header File of ActorClass ALK
 *
 */

#ifndef _TEMPLATEMODEL_ALK_H_
#define _TEMPLATEMODEL_ALK_H_

#include "etDatatypes.h"
#include "messaging/etMessage.h"

/* include all referenced room classes */
#include "TemplateModel/SendData.h"

/*--------------------- begin user code ---------------------*/
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>
struct timespec start,end;
/*--------------------- end user code ---------------------*/

typedef struct ALK ALK;

/* const part of ActorClass (ROM) */
typedef struct ALK_const {
	const char* instName;

	/* simple ports */
	const SendDataPort recvPort;

	/* data receive ports */

	/* saps */

	/* replicated ports */
	const etReplPort ALKdata;

	/* services */
} ALK_const;


/* constant for state machine data */
#define ALK_HISTORY_SIZE 2

/* variable part of ActorClass (RAM) */
struct ALK {
	const ALK_const* const constData;

	/* data send ports */

	/*--------------------- attributes ---------------------*/
	 char str[40]
	;
	 char send_str[40]
	;
	 char temp_string[40]
	;
	 float64 velorespon;
	 float64 colrespon;
	 float64 trafficrespon;
	 float64 steerrespon;
	 float32 velocity;
	 float32 distance;
	 int32 colliderNum;
	 char colliderNum_str[40]
	;
	 float32 steering;
	 float32 trafficLight;
	 char situation_code[40]
	;
	 float32 firstvelotime;
	 float32 firstcollidertime;
	 float32 firststeertime;
	 float32 firsttraffictime;
	 float32 secondvelotime;
	 float32 secondcollidertime;
	 float32 secondsteertime;
	 float32 secondtraffictime;


	/* state machine variables */
	etInt16 state;
	etInt16 history[ALK_HISTORY_SIZE];
};

void ALK_init(ALK* self);

void ALK_receiveMessage(void* self, const void* ifitem, const etMessage* msg);


/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/
 bool ALK_ALKchoicePoint0(ALK* self, charPtr s_code);
 int32 ALK_lane_change(ALK* self);


#endif /* _TEMPLATEMODEL_ALK_H_ */

