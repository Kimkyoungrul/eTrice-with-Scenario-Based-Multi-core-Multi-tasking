/**
 * @author generated by eTrice
 *
 * Source File of ProtocolClass Change
 * 
 */

#include "Change.h"
#include "debugging/etMSCLogger.h"
#include "Change_Utils.h"


/*--------------------- port methods */

void ChangePort_recvChange(const ChangePort* self) {
	ET_MSC_LOGGER_SYNC_ENTRY("ChangePort", "recvChange")
		etPort_sendMessage(self, Change_OUT_recvChange, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(self->myInstName, "recvChange", self->peerInstName)
	ET_MSC_LOGGER_SYNC_EXIT
}

void ChangeReplPort_recvChange_broadcast(const ChangeReplPort* self) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("ChangeReplPort", "recvChange")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), Change_OUT_recvChange, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[i].port.myInstName, "recvChange", ((etReplPort*)self)->ports[i].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

void ChangeReplPort_recvChange(const ChangeReplPort* self, int idx__et) {
	ET_MSC_LOGGER_SYNC_ENTRY("ChangeReplPort", "recvChange")
	if (0<=idx__et && idx__et<((etReplPort*)self)->size) {
		etPort_sendMessage((&((etReplPort*)self)->ports[idx__et].port), Change_OUT_recvChange, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[idx__et].port.myInstName, "recvChange", ((etReplPort*)self)->ports[idx__et].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

etInt32 ChangeReplPort_getReplication(const ChangeReplPort* self) {
	return ((etReplPort*)self)->size;
}



void ChangeConjPort_sendChange(const ChangeConjPort* self) {
	ET_MSC_LOGGER_SYNC_ENTRY("ChangeConjPort", "sendChange")
		etPort_sendMessage(self, Change_IN_sendChange, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(self->myInstName, "sendChange", self->peerInstName)
	ET_MSC_LOGGER_SYNC_EXIT
}

void ChangeConjReplPort_sendChange_broadcast(const ChangeConjReplPort* self) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("ChangeConjReplPort", "sendChange")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), Change_IN_sendChange, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[i].port.myInstName, "sendChange", ((etReplPort*)self)->ports[i].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

void ChangeConjReplPort_sendChange(const ChangeConjReplPort* self, int idx__et) {
	ET_MSC_LOGGER_SYNC_ENTRY("ChangeConjReplPort", "sendChange")
	if (0<=idx__et && idx__et<((etReplPort*)self)->size) {
		etPort_sendMessage((&((etReplPort*)self)->ports[idx__et].port), Change_IN_sendChange, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[idx__et].port.myInstName, "sendChange", ((etReplPort*)self)->ports[idx__et].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

etInt32 ChangeConjReplPort_getReplication(const ChangeConjReplPort* self) {
	return ((etReplPort*)self)->size;
}



/*--------------------- debug helpers */

/* message names as strings for debugging (generate MSC) */
static const char* const Change_messageStrings[] = {"MIN", "recvChange","sendChange", "MAX"};

const char* Change_getMessageString(int msg_id) {
	if (msg_id<Change_MSG_MIN || msg_id>Change_MSG_MAX+1){
		/* id out of range */
		return "Message ID out of range";
	}
	else{
		return Change_messageStrings[msg_id];
	}
}
