/**
 * @author generated by eTrice
 *
 * Source File of ActorClass ThrottleActuator
 *
 */

#include "ThrottleActuator.h"

#include "modelbase/etActor.h"
#include "debugging/etLogger.h"
#include "debugging/etMSCLogger.h"
#include "etUnit/etUnit.h"
#include "base/etMemory.h"

#include "room/basic/service/timing/PTimer.h"
#include "TemplateModel/SendData.h"

#include "ThrottleActuator_Utils.h"


/* interface item IDs */
enum interface_items {
	IFITEM_throttlePort = 1,
	IFITEM_timer = 2
};

/* state IDs */
enum state_ids {
	NO_STATE = 0,
	STATE_TOP = 1,
	STATE_throttleactuator = 2,
	STATE_MAX = 3
};

/* transition chains */
enum ChainIDs {
	CHAIN_TRANS_INITIAL_TO__throttleactuator = 1,
	CHAIN_TRANS_tr0_FROM_throttleactuator_TO_cp0_BY_sendDatathrottlePort = 2,
	CHAIN_TRANS_tr1_FROM_throttleactuator_TO_cp1_BY_timeouttimer = 3
};

/* triggers */
enum triggers {
	POLLING = 0,
	TRIG_throttlePort__sendData = IFITEM_throttlePort + EVT_SHIFT*SendData_IN_sendData,
	TRIG_throttlePort__sendchangestate = IFITEM_throttlePort + EVT_SHIFT*SendData_IN_sendchangestate,
	TRIG_timer__timeout = IFITEM_timer + EVT_SHIFT*PTimer_OUT_timeout
};

/* state names */
static char* stateStrings[] = {"<no state>","<top>","throttleactuator"
};

static void setState(ThrottleActuator* self, etInt16 new_state) {
	self->state = new_state;
	ET_MSC_LOGGER_CHANGE_STATE(self->constData->instName, stateStrings[new_state])
}

static etInt16 getState(ThrottleActuator* self) {
	return self->state;
}

/* Entry and Exit Codes */

/* Action Codes */
static void action_TRANS_INITIAL_TO__throttleactuator(ThrottleActuator* self) {
    fp3 = fopen("airsystem.txt", "a");
    fp4 = fopen("throttleactuator.txt", "a");
    count=1;
    timer_startTimer(10);
}
static void action_TRANS_tr0_FROM_throttleactuator_TO_cp0_BY_sendDatathrottlePort(ThrottleActuator* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    if(CHECKTIME==6||CHECKTIME==31){
    clock_gettime(CLOCK_MONOTONIC,&airsysstart);
    pthread_t id;
    id=pthread_self();
    actor5_6_id=(int)id;
    }
    for(int i =0;i<ONE_Milli_SEC_CONUT*0.49*MULCCS;i++){
    }
    recvairsystemstarttime=data->actor_1;
    recvairsystemtime2=data->actor_5;
    recvscenarioID=data->scenarioID;
    recvinstanceID=data->instanceID;
    recvpedalvotertime=data->actor_2;
    recvpedalfeeltime=data->actor_3;
    recvthrottlecontrollertime=data->actor_4;
    actor5_1_id=data->actor_1_id;
    actor5_2_id=data->actor_2_id;
    actor5_3_id=data->actor_3_id;
    actor5_4_id=data->actor_4_id;
    actor5_5_id=data->actor_5_id;
    recvemer=data->emergency;
}
static void action_TRANS_tr1_FROM_throttleactuator_TO_cp1_BY_timeouttimer(ThrottleActuator* self, const InterfaceItemBase* ifitem) {
    						if(CHECKTIME==7||CHECKTIME==8||CHECKTIME==30||CHECKTIME==31){
    						clock_gettime(CLOCK_MONOTONIC,&throactstart);
    						pthread_t id;
    						id=pthread_self();
    						actor8_1_id=(int)id;
    						}
    						for(int i =0;i<ONE_Milli_SEC_CONUT*5.913*MULCCS;i++){
    						}
    						count++;
    //						if(count==10000)
    //							timer.kill();
}
static void action_TRANS_tr3_FROM_cp0_TO_throttleactuator_COND_tr3(ThrottleActuator* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    clock_gettime(CLOCK_MONOTONIC,&airsysend);
    //changePriority(pthread_self(),&self->constData->throttlePort.msgService->messageQueue);
    if(CHECKTIME==5||CHECKTIME==30){
    fprintf(fp3, "scenarionum:%d, instancenum; %d,totaltime:%f\n",recvscenarioID,recvinstanceID,((((1.0e+9*airsysend.tv_sec)+airsysend.tv_nsec)/1.0e+6)-recvairsystemstarttime));
    }
    else if(CHECKTIME==6||CHECKTIME==31){
    //fprintf(fp3, "scenarionum:%d, instancenum; %d, airsystem:%f, pedalvotertime:%f, pedalfeeltime:%f, throttlecontrollertime:%f, airact:%f, totaltime:%f\n",recvscenarioID,recvinstanceID, recvairsystemstarttime,recvpedalvotertime,recvpedalfeeltime,recvthrottlecontrollertime,((1.0e+9*(airsysstart.tv_sec))+(airsysstart.tv_nsec))/1.0e+6,((((1.0e+9*airsysend.tv_sec)+airsysend.tv_nsec)/1.0e+6)-recvairsystemstarttime));
    fprintf(fp3, "%5.6f,scenario_5,%d,instance_%d,actor_5,%f\n",recvairsystemstarttime,actor5_1_id,recvinstanceID,((((1.0e+9*airsysend.tv_sec)+airsysend.tv_nsec)/1.0e+6)));
    fprintf(fp3, "%5.6f,scenario_5,%d,instance_%d,actor_11,%f\n",recvpedalvotertime,actor5_2_id,recvinstanceID,((((1.0e+9*airsysend.tv_sec)+airsysend.tv_nsec)/1.0e+6)));
    fprintf(fp3, "%5.6f,scenario_5,%d,instance_%d,actor_12,%f\n",recvpedalfeeltime,actor5_3_id,recvinstanceID,((((1.0e+9*airsysend.tv_sec)+airsysend.tv_nsec)/1.0e+6)));
    fprintf(fp3, "%5.6f,scenario_5,%d,instance_%d,actor_13,%f\n",recvthrottlecontrollertime,actor5_4_id,recvinstanceID,((((1.0e+9*airsysend.tv_sec)+airsysend.tv_nsec)/1.0e+6)));
    fprintf(fp3, "%5.6f,scenario_5,%d,instance_%d,actor_5,%f\n",recvairsystemtime2,actor5_5_id,recvinstanceID,((((1.0e+9*airsysend.tv_sec)+airsysend.tv_nsec)/1.0e+6)));
    fprintf(fp3, "%5.6f,scenario_5,%d,instance_%d,actor_8,%f\n",((1.0e+9*(airsysstart.tv_sec))+(airsysstart.tv_nsec))/1.0e+6,actor5_6_id,recvinstanceID,((((1.0e+9*airsysend.tv_sec)+airsysend.tv_nsec)/1.0e+6)));
    }
    fclose(fp3);
    
    
}
static void action_TRANS_tr6_FROM_cp1_TO_throttleactuator_COND_tr6(ThrottleActuator* self, const InterfaceItemBase* ifitem) {
    if(CHECKTIME==7||CHECKTIME==30){
    clock_gettime(CLOCK_MONOTONIC,&throactend);
    fprintf(fp4, "instancenum: %d,throttleact:%f\n",count,((1.0e+9*(throactend.tv_sec-throactstart.tv_sec))+(throactend.tv_nsec-throactstart.tv_nsec))/1.0e+6);
    fclose(fp4);
    }
    else if (CHECKTIME==8||CHECKTIME==31){
    clock_gettime(CLOCK_MONOTONIC,&throactend);
    //fprintf(fp4, "instancenum: %d,throttleact:%f\n",count,((1.0e+9*(throactend.tv_sec-throactstart.tv_sec))+(throactend.tv_nsec-throactstart.tv_nsec))/1.0e+6);
    fprintf(fp4, "%5.6f,scenario_8,%d,instance_%d,actor_8,%f\n",((1.0e+9*(throactstart.tv_sec))+(throactstart.tv_nsec))/1.0e+6,actor8_1_id,count,((1.0e+9*(throactend.tv_sec))+(throactend.tv_nsec))/1.0e+6);
    fclose(fp4);
    }
}
static void action_TRANS_tr7_FROM_cp1_TO_throttleactuator_COND_tr7(ThrottleActuator* self, const InterfaceItemBase* ifitem) {
    if(CHECKTIME==7||CHECKTIME==30){
    clock_gettime(CLOCK_MONOTONIC,&throactend);
    fprintf(fp4, "instancenum: %d,throttleact:%f\n",count,((1.0e+9*(throactend.tv_sec-throactstart.tv_sec))+(throactend.tv_nsec-throactstart.tv_nsec))/1.0e+6);
    fflush(fp4);
    }
    else if (CHECKTIME==8||CHECKTIME==31){
    clock_gettime(CLOCK_MONOTONIC,&throactend);
    //fprintf(fp4, "instancenum: %d,throttleact:%f\n",count,((1.0e+9*(throactend.tv_sec-throactstart.tv_sec))+(throactend.tv_nsec-throactstart.tv_nsec))/1.0e+6);
    fprintf(fp4, "%5.6f,scenario_8,%d,instance_%d,actor_8,%f\n",((1.0e+9*(throactstart.tv_sec))+(throactstart.tv_nsec))/1.0e+6,actor8_1_id,count,((1.0e+9*(throactend.tv_sec))+(throactend.tv_nsec))/1.0e+6);
    fflush(fp4);
    }
}
static void action_TRANS_tr8_FROM_cp0_TO_throttleactuator_COND_tr8(ThrottleActuator* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    clock_gettime(CLOCK_MONOTONIC,&airsysend);
    //changePriority(pthread_self(),&self->constData->throttlePort.msgService->messageQueue);
    if(CHECKTIME==5||CHECKTIME==30){
    fprintf(fp3, "scenarionum:%d, instancenum; %d,totaltime:%f\n",recvscenarioID,recvinstanceID,((((1.0e+9*airsysend.tv_sec)+airsysend.tv_nsec)/1.0e+6)-recvairsystemstarttime));//
    }
    else if(CHECKTIME==6||CHECKTIME==31){
    //fprintf(fp3, "scenarionum:%d, instancenum; %d, airsystem:%f, pedalvotertime:%f, pedalfeeltime:%f, throttlecontrollertime:%f, airact:%f, totaltime:%f\n",recvscenarioID,recvinstanceID, recvairsystemstarttime,recvpedalvotertime,recvpedalfeeltime,recvthrottlecontrollertime,((1.0e+9*(airsysstart.tv_sec))+(airsysstart.tv_nsec))/1.0e+6,((((1.0e+9*airsysend.tv_sec)+airsysend.tv_nsec)/1.0e+6)-recvairsystemstarttime));
    fprintf(fp3, "%5.6f,scenario_5,%d,instance_%d,actor_5,%f\n",recvairsystemstarttime,actor5_1_id,recvinstanceID,((((1.0e+9*airsysend.tv_sec)+airsysend.tv_nsec)/1.0e+6)));
    fprintf(fp3, "%5.6f,scenario_5,%d,instance_%d,actor_11,%f\n",recvpedalvotertime,actor5_2_id,recvinstanceID,((((1.0e+9*airsysend.tv_sec)+airsysend.tv_nsec)/1.0e+6)));
    fprintf(fp3, "%5.6f,scenario_5,%d,instance_%d,actor_12,%f\n",recvpedalfeeltime,actor5_3_id,recvinstanceID,((((1.0e+9*airsysend.tv_sec)+airsysend.tv_nsec)/1.0e+6)));
    fprintf(fp3, "%5.6f,scenario_5,%d,instance_%d,actor_13,%f\n",recvthrottlecontrollertime,actor5_4_id,recvinstanceID,((((1.0e+9*airsysend.tv_sec)+airsysend.tv_nsec)/1.0e+6)));
    fprintf(fp3, "%5.6f,scenario_5,%d,instance_%d,actor_5,%f\n",recvairsystemtime2,actor5_5_id,recvinstanceID,((((1.0e+9*airsysend.tv_sec)+airsysend.tv_nsec)/1.0e+6)));
    fprintf(fp3, "%5.6f,scenario_5,%d,instance_%d,actor_8,%f\n",((1.0e+9*(airsysstart.tv_sec))+(airsysstart.tv_nsec))/1.0e+6,actor5_6_id,recvinstanceID,((((1.0e+9*airsysend.tv_sec)+airsysend.tv_nsec)/1.0e+6)));
    }
    fflush(fp3);
}

/* State Switch Methods */
/**
 * calls exit codes while exiting from the current state to one of its
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(ThrottleActuator* self, etInt16 current__et, etInt16 to) {
	while (current__et!=to) {
		switch (current__et) {
			case STATE_throttleactuator:
				self->history[STATE_TOP] = STATE_throttleactuator;
				current__et = STATE_TOP;
				break;
			default:
				/* should not occur */
				break;
		}
	}
}

/**
 * calls action, entry and exit codes along a transition chain. The generic data are cast to typed data
 * matching the trigger of this chain. The ID of the final state is returned
 * @param chain__et - the chain ID
 * @param generic_data__et - the generic data pointer
 * @return the +/- ID of the final state either with a positive sign, that indicates to execute the state's entry code, or a negative sign vice versa
 */
static etInt16 executeTransitionChain(ThrottleActuator* self, int chain__et, const InterfaceItemBase* ifitem, void* generic_data__et) {
	switch (chain__et) {
		case CHAIN_TRANS_INITIAL_TO__throttleactuator:
		{
			action_TRANS_INITIAL_TO__throttleactuator(self);
			return STATE_throttleactuator;
		}
		case CHAIN_TRANS_tr0_FROM_throttleactuator_TO_cp0_BY_sendDatathrottlePort:
		{
			ADASMessage* data = ((ADASMessage*) generic_data__et);
			action_TRANS_tr0_FROM_throttleactuator_TO_cp0_BY_sendDatathrottlePort(self, ifitem, data);
			if (recvinstanceID==10000) {
			action_TRANS_tr3_FROM_cp0_TO_throttleactuator_COND_tr3(self, ifitem, data);
			return STATE_throttleactuator;}
			else if (recvemer==1) {
			return STATE_throttleactuator;}
			else if (recvinstanceID<10000&&recvinstanceID>0) {
			action_TRANS_tr8_FROM_cp0_TO_throttleactuator_COND_tr8(self, ifitem, data);
			return STATE_throttleactuator;}
			else {
			return STATE_throttleactuator;}
		}
		case CHAIN_TRANS_tr1_FROM_throttleactuator_TO_cp1_BY_timeouttimer:
		{
			action_TRANS_tr1_FROM_throttleactuator_TO_cp1_BY_timeouttimer(self, ifitem);
			if (count==10000) {
			action_TRANS_tr6_FROM_cp1_TO_throttleactuator_COND_tr6(self, ifitem);
			return STATE_throttleactuator;}
			else if (count>0&&count<10000) {
			action_TRANS_tr7_FROM_cp1_TO_throttleactuator_COND_tr7(self, ifitem);
			return STATE_throttleactuator;}
			else {
			return STATE_throttleactuator;}
		}
			default:
				/* should not occur */
				break;
	}
	return NO_STATE;
}

/**
 * calls entry codes while entering a state's history. The ID of the final leaf state is returned
 * @param state__et - the state which is entered
 * @return - the ID of the final leaf state
 */
static etInt16 enterHistory(ThrottleActuator* self, etInt16 state__et) {
	if (state__et >= STATE_MAX) {
		state__et = (etInt16) (state__et - STATE_MAX);
	}
	while (ET_TRUE) {
		switch (state__et) {
			case STATE_throttleactuator:
				/* in leaf state: return state id */
				return STATE_throttleactuator;
			case STATE_TOP:
				state__et = self->history[STATE_TOP];
				break;
			default:
				/* should not occur */
				break;
		}
	}
	/* return NO_STATE; // required by CDT but detected as unreachable by JDT because of while (true) */
}

static void ThrottleActuator_executeInitTransition(ThrottleActuator* self) {
	int chain__et = CHAIN_TRANS_INITIAL_TO__throttleactuator;
	etInt16 next__et = executeTransitionChain(self, chain__et, NULL, NULL);
	next__et = enterHistory(self, next__et);
	setState(self, next__et);
}

/* receiveEvent contains the main implementation of the FSM */
static void ThrottleActuator_receiveEventInternal(ThrottleActuator* self, InterfaceItemBase* ifitem, int localId, int evt, void* generic_data__et) {
	int trigger__et = localId + EVT_SHIFT*evt;
	int chain__et = NOT_CAUGHT;
	etInt16 catching_state__et = NO_STATE;
	((void)trigger__et);	/* avoids unused warning */

	if (!handleSystemEvent(ifitem, evt, generic_data__et)) {
		switch (getState(self)) {
		    case STATE_throttleactuator:
		        switch(trigger__et) {
		                case TRIG_throttlePort__sendData:
		                    {
		                        chain__et = CHAIN_TRANS_tr0_FROM_throttleactuator_TO_cp0_BY_sendDatathrottlePort;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                case TRIG_timer__timeout:
		                    {
		                        chain__et = CHAIN_TRANS_tr1_FROM_throttleactuator_TO_cp1_BY_timeouttimer;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                default:
		                    /* should not occur */
		                    break;
		        }
		        break;
		    default:
		        /* should not occur */
		        break;
		}
	}
	if (chain__et != NOT_CAUGHT) {
		exitTo(self, getState(self), catching_state__et);
		{
			etInt16 next__et = executeTransitionChain(self, chain__et, ifitem, generic_data__et);
			next__et = enterHistory(self, next__et);
			setState(self, next__et);
		}
	}
}
static void ThrottleActuator_receiveEvent(ThrottleActuator* self, InterfaceItemBase* ifitem, int evt, void* generic_data__et) {
	int localId = (ifitem==NULL)? 0 : ifitem->localId;
	ThrottleActuator_receiveEventInternal(self, ifitem, localId, evt, generic_data__et);
}

void ThrottleActuator_init(ThrottleActuator* self){
	ET_MSC_LOGGER_SYNC_ENTRY("ThrottleActuator", "init")
	self->state = STATE_TOP;
	{
		int i;
		for (i=0; i<THROTTLEACTUATOR_HISTORY_SIZE; ++i)
			self->history[i] = NO_STATE;
	}
	ThrottleActuator_executeInitTransition(self);
	ET_MSC_LOGGER_SYNC_EXIT
}


void ThrottleActuator_receiveMessage(void* self, const void* ifitem, const etMessage* msg){
	ET_MSC_LOGGER_SYNC_ENTRY("ThrottleActuator", "_receiveMessage")
	ThrottleActuator_receiveEvent(self, (etPort*)ifitem, msg->evtID, (void*)(((char*)msg)+MEM_CEIL(sizeof(etMessage))));

	ET_MSC_LOGGER_SYNC_EXIT
}


/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/

