/**
 * @author generated by eTrice
 *
 * Header File of ActorClass EngineSpeedAcquisition
 *
 */

#ifndef _TEMPLATEMODEL_ENGINESPEEDACQUISITION_H_
#define _TEMPLATEMODEL_ENGINESPEEDACQUISITION_H_

#include "etDatatypes.h"
#include "messaging/etMessage.h"

/* include all referenced room classes */
#include "room/basic/service/timing/PTimer.h"
#include "TemplateModel/SendData.h"

/*--------------------- begin user code ---------------------*/
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>
struct timespec enginestart,engineend;
/*--------------------- end user code ---------------------*/

typedef struct EngineSpeedAcquisition EngineSpeedAcquisition;

/* const part of ActorClass (ROM) */
typedef struct EngineSpeedAcquisition_const {
	const char* instName;

	/* simple ports */

	/* data receive ports */

	/* saps */
	const PTimerConjPort timer;

	/* replicated ports */
	const etReplPort speedPort;

	/* services */
} EngineSpeedAcquisition_const;


/* constant for state machine data */
#define ENGINESPEEDACQUISITION_HISTORY_SIZE 2

/* variable part of ActorClass (RAM) */
struct EngineSpeedAcquisition {
	const EngineSpeedAcquisition_const* const constData;

	/* data send ports */

	/*--------------------- attributes ---------------------*/


	/* state machine variables */
	etInt16 state;
	etInt16 history[ENGINESPEEDACQUISITION_HISTORY_SIZE];
};

void EngineSpeedAcquisition_init(EngineSpeedAcquisition* self);

void EngineSpeedAcquisition_receiveMessage(void* self, const void* ifitem, const etMessage* msg);


/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/


#endif /* _TEMPLATEMODEL_ENGINESPEEDACQUISITION_H_ */

