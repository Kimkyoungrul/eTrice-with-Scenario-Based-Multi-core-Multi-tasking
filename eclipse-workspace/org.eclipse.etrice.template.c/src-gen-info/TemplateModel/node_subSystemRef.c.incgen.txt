/**
 * @author generated by eTrice
 *
 * Source File of Node node with SubSystem subSystemRef
 *
 */

#include <stdio.h>
#include <string.h>


#include "node_subSystemRef.h"

#include "debugging/etLogger.h"
#include "debugging/etMSCLogger.h"
#include "debugging/etDataLogger.h"
#include "messaging/etSystemProtocol.h"
#include "osal/etTimer.h"
#include "osal/etSema.h"
#include "runtime/etRuntime.h"
#include "etRuntimeConfig.h"


/* data for Node node with SubSystem subSystemRef */
typedef struct node_subSystemRef {
	char *name;
	volatile int shutdownRequest;
} node_subSystemRef;

static node_subSystemRef node_subSystemRefInst = {"node_subSystemRef", 0};

static void node_subSystemRef_initActorInstances(void);
static void node_subSystemRef_constructActorInstances(void);

/* include instances for all classes */
#include "node_subSystemRef_Inst.h"
#include "node_subSystemRef_Disp.h"

static void node_subSystemRef_initMessageServices(void) {
	ET_MSC_LOGGER_SYNC_ENTRY("node_subSystemRef", "initMessageServices")
	{
		etTime interval;

		/* initialization of all message services */
		interval.sec = 0;
		interval.nSec = 5000000;
		etMessageService_init(
			&msgService_DefaultPhysicalThread,
			msgBuffer_DefaultPhysicalThread,
			DEFAULTPHYSICALTHREAD_POOL_SIZE,
			DEFAULTPHYSICALTHREAD_BLOCK_SIZE,
			1024,
			98,
			interval,
			MsgDispatcher_DefaultPhysicalThread_receiveMessage,
			EXECMODE_MIXED);

		etMessageService_init(
			&msgService_AirflowThread,
			msgBuffer_AirflowThread,
			AIRFLOWTHREAD_POOL_SIZE,
			AIRFLOWTHREAD_BLOCK_SIZE,
			1024,
			97,
			interval,
			MsgDispatcher_AirflowThread_receiveMessage,
			EXECMODE_BLOCKED);

		etMessageService_init(
			&msgService_ThrottleThread,
			msgBuffer_ThrottleThread,
			THROTTLETHREAD_POOL_SIZE,
			THROTTLETHREAD_BLOCK_SIZE,
			1024,
			96,
			interval,
			MsgDispatcher_ThrottleThread_receiveMessage,
			EXECMODE_BLOCKED);

		etMessageService_init(
			&msgService_PedalThread,
			msgBuffer_PedalThread,
			PEDALTHREAD_POOL_SIZE,
			PEDALTHREAD_BLOCK_SIZE,
			1024,
			95,
			interval,
			MsgDispatcher_PedalThread_receiveMessage,
			EXECMODE_BLOCKED);

		etMessageService_init(
			&msgService_IgniactThread,
			msgBuffer_IgniactThread,
			IGNIACTTHREAD_POOL_SIZE,
			IGNIACTTHREAD_BLOCK_SIZE,
			1024,
			94,
			interval,
			MsgDispatcher_IgniactThread_receiveMessage,
			EXECMODE_BLOCKED);

		etMessageService_init(
			&msgService_InjectactThread,
			msgBuffer_InjectactThread,
			INJECTACTTHREAD_POOL_SIZE,
			INJECTACTTHREAD_BLOCK_SIZE,
			1024,
			93,
			interval,
			MsgDispatcher_InjectactThread_receiveMessage,
			EXECMODE_BLOCKED);

		etMessageService_init(
			&msgService_ThrottleactThread,
			msgBuffer_ThrottleactThread,
			THROTTLEACTTHREAD_POOL_SIZE,
			THROTTLEACTTHREAD_BLOCK_SIZE,
			1024,
			92,
			interval,
			MsgDispatcher_ThrottleactThread_receiveMessage,
			EXECMODE_BLOCKED);

		etMessageService_init(
			&msgService_IgnitionsysThread,
			msgBuffer_IgnitionsysThread,
			IGNITIONSYSTHREAD_POOL_SIZE,
			IGNITIONSYSTHREAD_BLOCK_SIZE,
			1024,
			91,
			interval,
			MsgDispatcher_IgnitionsysThread_receiveMessage,
			EXECMODE_BLOCKED);

		etMessageService_init(
			&msgService_FuelingsysThread,
			msgBuffer_FuelingsysThread,
			FUELINGSYSTHREAD_POOL_SIZE,
			FUELINGSYSTHREAD_BLOCK_SIZE,
			1024,
			90,
			interval,
			MsgDispatcher_FuelingsysThread_receiveMessage,
			EXECMODE_BLOCKED);

		etMessageService_init(
			&msgService_AirsysThread,
			msgBuffer_AirsysThread,
			AIRSYSTHREAD_POOL_SIZE,
			AIRSYSTHREAD_BLOCK_SIZE,
			1024,
			89,
			interval,
			MsgDispatcher_AirsysThread_receiveMessage,
			EXECMODE_BLOCKED);

		etMessageService_init(
			&msgService_PedaldiagThread,
			msgBuffer_PedaldiagThread,
			PEDALDIAGTHREAD_POOL_SIZE,
			PEDALDIAGTHREAD_BLOCK_SIZE,
			1024,
			1,
			interval,
			MsgDispatcher_PedaldiagThread_receiveMessage,
			EXECMODE_BLOCKED);

	}

	ET_MSC_LOGGER_SYNC_EXIT
}

static void node_subSystemRef_startMessageServices(void) {
	ET_MSC_LOGGER_SYNC_ENTRY("node_subSystemRef", "startMessageServices")

	etMessageService_start(&msgService_DefaultPhysicalThread);
	etMessageService_start(&msgService_AirflowThread);
	etMessageService_start(&msgService_ThrottleThread);
	etMessageService_start(&msgService_PedalThread);
	etMessageService_start(&msgService_IgniactThread);
	etMessageService_start(&msgService_InjectactThread);
	etMessageService_start(&msgService_ThrottleactThread);
	etMessageService_start(&msgService_IgnitionsysThread);
	etMessageService_start(&msgService_FuelingsysThread);
	etMessageService_start(&msgService_AirsysThread);
	etMessageService_start(&msgService_PedaldiagThread);

	ET_MSC_LOGGER_SYNC_EXIT
}

static void node_subSystemRef_stopMessageServices(void) {
	ET_MSC_LOGGER_SYNC_ENTRY("node_subSystemRef", "stopMessageServices")

	etMessageService_stop(&msgService_DefaultPhysicalThread);
	etMessageService_stop(&msgService_PedalThread);
	etMessageService_stop(&msgService_ThrottleThread);
	etMessageService_stop(&msgService_AirflowThread);
	etMessageService_stop(&msgService_AirsysThread);
	etMessageService_stop(&msgService_FuelingsysThread);
	etMessageService_stop(&msgService_IgnitionsysThread);
	etMessageService_stop(&msgService_ThrottleactThread);
	etMessageService_stop(&msgService_InjectactThread);
	etMessageService_stop(&msgService_IgniactThread);
	etMessageService_stop(&msgService_PedaldiagThread);

	ET_MSC_LOGGER_SYNC_EXIT
}

static void node_subSystemRef_destroyMessageServices(void) {
	ET_MSC_LOGGER_SYNC_ENTRY("node_subSystemRef", "destroyMessageServices")

	etMessageService_destroy(&msgService_DefaultPhysicalThread);
	etMessageService_destroy(&msgService_PedalThread);
	etMessageService_destroy(&msgService_ThrottleThread);
	etMessageService_destroy(&msgService_AirflowThread);
	etMessageService_destroy(&msgService_AirsysThread);
	etMessageService_destroy(&msgService_FuelingsysThread);
	etMessageService_destroy(&msgService_IgnitionsysThread);
	etMessageService_destroy(&msgService_ThrottleactThread);
	etMessageService_destroy(&msgService_InjectactThread);
	etMessageService_destroy(&msgService_IgniactThread);
	etMessageService_destroy(&msgService_PedaldiagThread);

	ET_MSC_LOGGER_SYNC_EXIT
}

void node_subSystemRef_init(void) {
	ET_MSC_LOGGER_SYNC_ENTRY("node_subSystemRef", "init")
	etLogger_logInfoF("%s_init", node_subSystemRefInst.name);

	/* construct all actors */
	node_subSystemRef_constructActorInstances();

	/* initialization of all message services */
	node_subSystemRef_initMessageServices();

	/* init all actors */
	node_subSystemRef_initActorInstances();


	ET_MSC_LOGGER_SYNC_EXIT
}

void node_subSystemRef_start(void) {
	ET_MSC_LOGGER_SYNC_ENTRY("node_subSystemRef", "start")
	etLogger_logInfoF("%s_start", node_subSystemRefInst.name);
	node_subSystemRef_startMessageServices();
	ET_MSC_LOGGER_SYNC_EXIT
}

void node_subSystemRef_run(etBool runAsTest) {
#ifdef ET_RUNNER_ACTIVATE
	ET_MSC_LOGGER_SYNC_ENTRY("node_subSystemRef", "run")

	if (runAsTest) {
		etSema_waitForWakeup(etRuntime_getTerminateSemaphore());
	}
	else {
		printf("type quit to exit\n");
		fflush(stdout);
		while (ET_TRUE) {
			char line[64];

			if (fgets(line, 64, stdin) != NULL) {
				if (strncmp(line, "quit", 4)==0)
					break;
			}
		}
	}

	ET_MSC_LOGGER_SYNC_EXIT
#endif
}

void node_subSystemRef_stop(void){
	ET_MSC_LOGGER_SYNC_ENTRY("node_subSystemRef", "stop")
	etLogger_logInfoF("%s_stop", node_subSystemRefInst.name);

	node_subSystemRef_stopMessageServices();

	ET_MSC_LOGGER_SYNC_EXIT
}

void node_subSystemRef_destroy(void){
	ET_MSC_LOGGER_SYNC_ENTRY("node_subSystemRef", "destroy")
	etLogger_logInfoF("%s_destroy", node_subSystemRefInst.name);


	node_subSystemRef_destroyMessageServices();

	ET_MSC_LOGGER_SYNC_EXIT
}

void node_subSystemRef_shutdown(void){
	ET_MSC_LOGGER_SYNC_ENTRY("node_subSystemRef", "shutdown")
	etLogger_logInfoF("%s_shutdown", node_subSystemRefInst.name);

	node_subSystemRefInst.shutdownRequest = 1;

	ET_MSC_LOGGER_SYNC_EXIT
}


static void node_subSystemRef_constructActorInstances(void){
	ET_MSC_LOGGER_SYNC_ENTRY("node_subSystemRef", "constructActorInstances")


	ET_MSC_LOGGER_SYNC_EXIT
}

static void node_subSystemRef_initActorInstances(void){
	ET_MSC_LOGGER_SYNC_ENTRY("node_subSystemRef", "initActorInstances")

	TopActor_init(&_LogSys_subSystemRef_topActor);
	FuelingSystem_init(&_LogSys_subSystemRef_topActor_FuelingSystem);
	AirMassFlowChanger_init(&_LogSys_subSystemRef_topActor_FuelingSystem_AirMassFlow);
	BassFuelMassEntity_init(&_LogSys_subSystemRef_topActor_FuelingSystem_BassFuelMass);
	TransientFuelingCompensationEntity_init(&_LogSys_subSystemRef_topActor_FuelingSystem_TransientFurlingCompensation);
	AirSystem_init(&_LogSys_subSystemRef_topActor_AirSystem);
	pedalvoter_init(&_LogSys_subSystemRef_topActor_AirSystem_pedalvoter);
	pedalfeel_init(&_LogSys_subSystemRef_topActor_AirSystem_pedalfeel);
	throttlecontroller_init(&_LogSys_subSystemRef_topActor_AirSystem_throttlecontroller);
	IgnitionSystem_init(&_LogSys_subSystemRef_topActor_IgnitionSystem);
	AirMassFlowEntity_init(&_LogSys_subSystemRef_topActor_IgnitionSystem_AirMassFlow);
	BassFuelMassEntity2_init(&_LogSys_subSystemRef_topActor_IgnitionSystem_BassFuelMass2);
	AccelPedalSensor_init(&_LogSys_subSystemRef_topActor_AccelPedalSensor);
	ThrottleActuator_init(&_LogSys_subSystemRef_topActor_ThrottleActuator);
	InjectionActuator_init(&_LogSys_subSystemRef_topActor_InjectionActuator);
	InjectionTimingActuatorEntity_init(&_LogSys_subSystemRef_topActor_InjectionActuator_InjectionTimeActuator);
	TotalFuelingEntity_init(&_LogSys_subSystemRef_topActor_InjectionActuator_TotalFueling);
	IgnitionActuator_init(&_LogSys_subSystemRef_topActor_IgnitionActuator);
	IgnitionTimingActuatorEntity_init(&_LogSys_subSystemRef_topActor_IgnitionActuator_IgnitionTimeActuator);
	IgnitionTimingEntity_init(&_LogSys_subSystemRef_topActor_IgnitionActuator_IgnitionTiming);
	ThrottleSensor_init(&_LogSys_subSystemRef_topActor_ThrottleSensor);
	MassAirFlowSensor_init(&_LogSys_subSystemRef_topActor_MassAirFlowSensor);
	CylinerNumObserver_init(&_LogSys_subSystemRef_topActor_CylinerNumObserver);
	AccelPedalDiagEntity_init(&_LogSys_subSystemRef_topActor_PadelDiag);
	ATimingService_init(&_LogSys_subSystemRef_timingService);

	ET_MSC_LOGGER_SYNC_EXIT
}
