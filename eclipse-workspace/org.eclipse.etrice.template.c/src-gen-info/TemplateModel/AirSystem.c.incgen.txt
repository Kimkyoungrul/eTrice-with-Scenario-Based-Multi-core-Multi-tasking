/**
 * @author generated by eTrice
 *
 * Source File of ActorClass AirSystem
 *
 */

#include "AirSystem.h"

#include "modelbase/etActor.h"
#include "debugging/etLogger.h"
#include "debugging/etMSCLogger.h"
#include "etUnit/etUnit.h"
#include "base/etMemory.h"

#include "room/basic/service/timing/PTimer.h"
#include "TemplateModel/SendData.h"

#include "AirSystem_Utils.h"


/* interface item IDs */
enum interface_items {
	IFITEM_throttlePort = 3,
	IFITEM_throttledata = 4,
	IFITEM_padalPort = 5,
	IFITEM_internalpedal = 1,
	IFITEM_Internalthrottle = 2,
	IFITEM_timer = 6
};

/* state IDs */
enum state_ids {
	NO_STATE = 0,
	STATE_TOP = 1,
	STATE_waiting = 2,
	STATE_MAX = 3
};

/* transition chains */
enum ChainIDs {
	CHAIN_TRANS_INITIAL_TO__waiting = 1,
	CHAIN_TRANS_tr2_FROM_waiting_TO_cp0_BY_sendDatathrottlePort = 2,
	CHAIN_TRANS_tr0_FROM_waiting_TO_cp1_BY_sendDatapadalPort = 3,
	CHAIN_TRANS_tr1_FROM_waiting_TO_waiting_BY_timeouttimer_tr1 = 4,
	CHAIN_TRANS_tr3_FROM_waiting_TO_waiting_BY_sendDataInternalthrottle_tr3 = 5
};

/* triggers */
enum triggers {
	POLLING = 0,
	TRIG_internalpedal__recursive2 = IFITEM_internalpedal + EVT_SHIFT*SendData_OUT_recursive2,
	TRIG_internalpedal__recvchangestate = IFITEM_internalpedal + EVT_SHIFT*SendData_OUT_recvchangestate,
	TRIG_Internalthrottle__sendData = IFITEM_Internalthrottle + EVT_SHIFT*SendData_IN_sendData,
	TRIG_Internalthrottle__sendchangestate = IFITEM_Internalthrottle + EVT_SHIFT*SendData_IN_sendchangestate,
	TRIG_throttlePort__sendData = IFITEM_throttlePort + EVT_SHIFT*SendData_IN_sendData,
	TRIG_throttlePort__sendchangestate = IFITEM_throttlePort + EVT_SHIFT*SendData_IN_sendchangestate,
	TRIG_throttledata__recursive2 = IFITEM_throttledata + EVT_SHIFT*SendData_OUT_recursive2,
	TRIG_throttledata__recvchangestate = IFITEM_throttledata + EVT_SHIFT*SendData_OUT_recvchangestate,
	TRIG_padalPort__sendData = IFITEM_padalPort + EVT_SHIFT*SendData_IN_sendData,
	TRIG_padalPort__sendchangestate = IFITEM_padalPort + EVT_SHIFT*SendData_IN_sendchangestate,
	TRIG_timer__timeout = IFITEM_timer + EVT_SHIFT*PTimer_OUT_timeout
};

/* state names */
static char* stateStrings[] = {"<no state>","<top>","waiting"
};

static void setState(AirSystem* self, etInt16 new_state) {
	self->state = new_state;
	ET_MSC_LOGGER_CHANGE_STATE(self->constData->instName, stateStrings[new_state])
}

static etInt16 getState(AirSystem* self) {
	return self->state;
}

/* Entry and Exit Codes */

/* Action Codes */
static void action_TRANS_INITIAL_TO__waiting(AirSystem* self) {
    fp2 = fopen("throttlesensor.txt", "a");
    fp1 = fopen("pedalsensor.txt", "a");
    count2=1;
    timer_startTimer(10);
}
static void action_TRANS_tr2_FROM_waiting_TO_cp0_BY_sendDatathrottlePort(AirSystem* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    if(CHECKTIME==4||CHECKTIME==31){
    clock_gettime(CLOCK_MONOTONIC,&throsensestart);
    pthread_t id;
    id=pthread_self();
    actor2_2_id=(int)id;
    }
    for(int i =0;i<ONE_Milli_SEC_CONUT*0.06*MULCCS;i++){
    }
    actor2_1_id = data->actor_1_id;
    recvthrottlesensetime = data->actor_1;
    throttlescen = data->scenarioID;
    throttleins = data->instanceID;
}
static void action_TRANS_tr0_FROM_waiting_TO_cp1_BY_sendDatapadalPort(AirSystem* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    if(CHECKTIME==2||CHECKTIME==31){
    clock_gettime(CLOCK_MONOTONIC,&pedalsensestart);
    pthread_t id;
    id=pthread_self();
    actor1_2_id=(int)id;
    }
    for(int i =0;i<ONE_Milli_SEC_CONUT*0.05*MULCCS;i++){
    }
    actor1_1_id = data->actor_1_id;
    recvpedalsensetime=data->actor_1;
    //recvpedalfirsttime=data->firsttime;
    pedalscen=data->scenarioID;
    pedalins=data->instanceID;
}
static void action_TRANS_tr1_FROM_waiting_TO_waiting_BY_timeouttimer_tr1(AirSystem* self, const InterfaceItemBase* ifitem) {
    ADASMessage ADASmessage;
    if(CHECKTIME==5||CHECKTIME==6||CHECKTIME==30||CHECKTIME==31){
    clock_gettime(CLOCK_MONOTONIC,&airsysstart);
    ADASmessage.actor_1 = ((1.0e+9*airsysstart.tv_sec)+airsysstart.tv_nsec)/1.0e+6;
    pthread_t id;
    id=pthread_self();
    ADASmessage.actor_1_id=(int)id;
    }
    for(int i =0;i<ONE_Milli_SEC_CONUT*0.05*MULCCS;i++){
    }
    ADASmessage.instanceID = count2;
    //ADASmessage.prior=2;
    
    internalpedal_sendData(&ADASmessage);
    count2++;
    //if(count2==10000)
    //timer.kill();
}
static void action_TRANS_tr3_FROM_waiting_TO_waiting_BY_sendDataInternalthrottle_tr3(AirSystem* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    ADASMessage ADASmessage;
    clock_gettime(CLOCK_MONOTONIC,&airsysstart2);
    ADASmessage.actor_5 = ((1.0e+9*(airsysstart2.tv_sec))+(airsysstart2.tv_nsec))/1.0e+6;
    pthread_t id;
    id=pthread_self();
    ADASmessage.actor_5_id=(int)id;
    ADASmessage.scenarioID=5;
    ADASmessage.instanceID = data->instanceID;
    ADASmessage.actor_1 = data->actor_1;
    ADASmessage.actor_3 = data->actor_3;
    ADASmessage.actor_2 = data->actor_2;
    ADASmessage.actor_4 = data->actor_4;
    ADASmessage.actor_1_id = data->actor_1_id;
    ADASmessage.actor_2_id = data->actor_2_id;
    ADASmessage.actor_3_id = data->actor_3_id;
    ADASmessage.actor_4_id = data->actor_4_id;
    //ADASmessage.prior=2;
    throttledata_sendData(&ADASmessage);
    //timer.startTimeout(10);
}
static void action_TRANS_tr5_FROM_cp0_TO_waiting_COND_tr5(AirSystem* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    clock_gettime(CLOCK_MONOTONIC,&throsenseend);
    //changePriority(pthread_self(),&self->constData->throttlePort.msgService->messageQueue);
    if(CHECKTIME==3||CHECKTIME==30){
    fprintf(fp2, "scenarionum:%d, instancenum: %d, totaltime:%f\n",throttlescen,throttleins,((((1.0e+9*throsenseend.tv_sec)+throsenseend.tv_nsec)/1.0e+6)-recvthrottlesensetime));
    }
    else if(CHECKTIME==4||CHECKTIME==31){
    //fprintf(fp2, "scenarionum:%d, instancenum: %d,thottlesensor:%f, airsys: %f, totaltime:%f\n",throttlescen,throttleins, recvthrottlesensetime,((1.0e+9*(throsensestart.tv_sec))+throsensestart.tv_nsec)/1.0e+6,((((1.0e+9*throsenseend.tv_sec)+throsenseend.tv_nsec)/1.0e+6)-recvthrottlesensetime));
    fprintf(fp2, "%5.6f,scenario_2,%d,instance_%d,actor_2,%f\n%f,scenario_2,%d,instance_%d,actor_5,%f\n",recvthrottlesensetime,actor2_1_id,throttleins,((((1.0e+9*throsenseend.tv_sec)+throsenseend.tv_nsec)/1.0e+6)),((1.0e+9*(throsensestart.tv_sec))+throsensestart.tv_nsec)/1.0e+6,actor2_2_id,throttleins,((((1.0e+9*throsenseend.tv_sec)+throsenseend.tv_nsec)/1.0e+6)));
    }
    fclose(fp2);
}
static void action_TRANS_tr8_FROM_cp1_TO_waiting_COND_tr8(AirSystem* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    clock_gettime(CLOCK_MONOTONIC,&pedalsenseend);
    //changePriority(pthread_self(),&self->constData->padalPort.msgService->messageQueue);
    if(CHECKTIME==1||CHECKTIME==30){
    fprintf(fp1, "scenarionum:%d, instancenum: %d, totaltime:%f\n",pedalscen,pedalins,((((1.0e+9*pedalsenseend.tv_sec)+pedalsenseend.tv_nsec)/1.0e+6)-recvpedalsensetime));
    }
    else if (CHECKTIME==2||CHECKTIME==31){
    fprintf(fp1, "%5.6f,scenario_1,%d,instance_%d,actor_1,%f\n%f,scenario_1,%d,instance_%d,actor_5,%f\n",recvpedalsensetime,actor1_1_id,pedalins,((((1.0e+9*pedalsenseend.tv_sec)+pedalsenseend.tv_nsec)/1.0e+6)),((1.0e+9*(pedalsensestart.tv_sec))+(pedalsensestart.tv_nsec))/1.0e+6,actor1_2_id,pedalins,((((1.0e+9*pedalsenseend.tv_sec)+pedalsenseend.tv_nsec)/1.0e+6)));
    }
    fclose (fp1);
}
static void action_TRANS_tr10_FROM_cp0_TO_waiting_COND_tr10(AirSystem* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    clock_gettime(CLOCK_MONOTONIC,&throsenseend);
    //changePriority(pthread_self(),&self->constData->throttlePort.msgService->messageQueue);
    if(CHECKTIME==3||CHECKTIME==30){
    fprintf(fp2, "scenarionum:%d, instancenum: %d, totaltime:%f\n",throttlescen,throttleins,((((1.0e+9*throsenseend.tv_sec)+throsenseend.tv_nsec)/1.0e+6)-recvthrottlesensetime));
    }
    else if(CHECKTIME==4||CHECKTIME==31){
    //fprintf(fp2, "scenarionum:%d, instancenum: %d,thottlesensor:%f, airsys: %f, totaltime:%f\n",throttlescen,throttleins, recvthrottlesensetime,((1.0e+9*(throsensestart.tv_sec))+throsensestart.tv_nsec)/1.0e+6,((((1.0e+9*throsenseend.tv_sec)+throsenseend.tv_nsec)/1.0e+6)-recvthrottlesensetime));
    fprintf(fp2, "%5.6f,scenario_2,%d,instance_%d,actor_2,%f\n%f,scenario_2,%d,instance_%d,actor_5,%f\n",recvthrottlesensetime,actor2_1_id,throttleins,((((1.0e+9*throsenseend.tv_sec)+throsenseend.tv_nsec)/1.0e+6)),((1.0e+9*(throsensestart.tv_sec))+throsensestart.tv_nsec)/1.0e+6,actor2_2_id,throttleins,(((1.0e+9*throsenseend.tv_sec)+throsenseend.tv_nsec)/1.0e+6));
    
    }
    fflush(fp2);
}
static void action_TRANS_tr11_FROM_cp1_TO_waiting_COND_tr11(AirSystem* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    clock_gettime(CLOCK_MONOTONIC,&pedalsenseend);
    //changePriority(pthread_self(),&self->constData->padalPort.msgService->messageQueue);
    if(CHECKTIME==1||CHECKTIME==30){
    fprintf(fp1, "scenarionum:%d, instancenum: %d, totaltime:%f\n",pedalscen,pedalins,((((1.0e+9*pedalsenseend.tv_sec)+pedalsenseend.tv_nsec)/1.0e+6)-recvpedalsensetime));
    }
    else if (CHECKTIME==2||CHECKTIME==31){
    fprintf(fp1, "%5.6f,scenario_1,%d,instance_%d,actor_1,%f\n%f,scenario_1,%d,instance_%d,actor_5,%f\n",recvpedalsensetime,actor1_1_id,pedalins,((((1.0e+9*pedalsenseend.tv_sec)+pedalsenseend.tv_nsec)/1.0e+6)),((1.0e+9*(pedalsensestart.tv_sec))+(pedalsensestart.tv_nsec))/1.0e+6,actor1_2_id,pedalins,((((1.0e+9*pedalsenseend.tv_sec)+pedalsenseend.tv_nsec)/1.0e+6)));
    }
    fflush(fp1);
}

/* State Switch Methods */
/**
 * calls exit codes while exiting from the current state to one of its
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(AirSystem* self, etInt16 current__et, etInt16 to) {
	while (current__et!=to) {
		switch (current__et) {
			case STATE_waiting:
				self->history[STATE_TOP] = STATE_waiting;
				current__et = STATE_TOP;
				break;
			default:
				/* should not occur */
				break;
		}
	}
}

/**
 * calls action, entry and exit codes along a transition chain. The generic data are cast to typed data
 * matching the trigger of this chain. The ID of the final state is returned
 * @param chain__et - the chain ID
 * @param generic_data__et - the generic data pointer
 * @return the +/- ID of the final state either with a positive sign, that indicates to execute the state's entry code, or a negative sign vice versa
 */
static etInt16 executeTransitionChain(AirSystem* self, int chain__et, const InterfaceItemBase* ifitem, void* generic_data__et) {
	switch (chain__et) {
		case CHAIN_TRANS_INITIAL_TO__waiting:
		{
			action_TRANS_INITIAL_TO__waiting(self);
			return STATE_waiting;
		}
		case CHAIN_TRANS_tr2_FROM_waiting_TO_cp0_BY_sendDatathrottlePort:
		{
			ADASMessage* data = ((ADASMessage*) generic_data__et);
			action_TRANS_tr2_FROM_waiting_TO_cp0_BY_sendDatathrottlePort(self, ifitem, data);
			if (throttleins==10000
			) {
			action_TRANS_tr5_FROM_cp0_TO_waiting_COND_tr5(self, ifitem, data);
			return STATE_waiting;}
			else if (throttleemer==1) {
			return STATE_waiting;}
			else if (throttleins<10000&&throttleins>0
			
			) {
			action_TRANS_tr10_FROM_cp0_TO_waiting_COND_tr10(self, ifitem, data);
			return STATE_waiting;}
			else {
			return STATE_waiting;}
		}
		case CHAIN_TRANS_tr0_FROM_waiting_TO_cp1_BY_sendDatapadalPort:
		{
			ADASMessage* data = ((ADASMessage*) generic_data__et);
			action_TRANS_tr0_FROM_waiting_TO_cp1_BY_sendDatapadalPort(self, ifitem, data);
			if (pedalins==10000) {
			action_TRANS_tr8_FROM_cp1_TO_waiting_COND_tr8(self, ifitem, data);
			return STATE_waiting;}
			else if (pedalemer==1) {
			return STATE_waiting;}
			else if (pedalins<10000&&pedalins>0
			) {
			action_TRANS_tr11_FROM_cp1_TO_waiting_COND_tr11(self, ifitem, data);
			return STATE_waiting;}
			else {
			return STATE_waiting;}
		}
		case CHAIN_TRANS_tr1_FROM_waiting_TO_waiting_BY_timeouttimer_tr1:
		{
			action_TRANS_tr1_FROM_waiting_TO_waiting_BY_timeouttimer_tr1(self, ifitem);
			return STATE_waiting;
		}
		case CHAIN_TRANS_tr3_FROM_waiting_TO_waiting_BY_sendDataInternalthrottle_tr3:
		{
			ADASMessage* data = ((ADASMessage*) generic_data__et);
			action_TRANS_tr3_FROM_waiting_TO_waiting_BY_sendDataInternalthrottle_tr3(self, ifitem, data);
			return STATE_waiting;
		}
			default:
				/* should not occur */
				break;
	}
	return NO_STATE;
}

/**
 * calls entry codes while entering a state's history. The ID of the final leaf state is returned
 * @param state__et - the state which is entered
 * @return - the ID of the final leaf state
 */
static etInt16 enterHistory(AirSystem* self, etInt16 state__et) {
	if (state__et >= STATE_MAX) {
		state__et = (etInt16) (state__et - STATE_MAX);
	}
	while (ET_TRUE) {
		switch (state__et) {
			case STATE_waiting:
				/* in leaf state: return state id */
				return STATE_waiting;
			case STATE_TOP:
				state__et = self->history[STATE_TOP];
				break;
			default:
				/* should not occur */
				break;
		}
	}
	/* return NO_STATE; // required by CDT but detected as unreachable by JDT because of while (true) */
}

static void AirSystem_executeInitTransition(AirSystem* self) {
	int chain__et = CHAIN_TRANS_INITIAL_TO__waiting;
	etInt16 next__et = executeTransitionChain(self, chain__et, NULL, NULL);
	next__et = enterHistory(self, next__et);
	setState(self, next__et);
}

/* receiveEvent contains the main implementation of the FSM */
static void AirSystem_receiveEventInternal(AirSystem* self, InterfaceItemBase* ifitem, int localId, int evt, void* generic_data__et) {
	int trigger__et = localId + EVT_SHIFT*evt;
	int chain__et = NOT_CAUGHT;
	etInt16 catching_state__et = NO_STATE;
	((void)trigger__et);	/* avoids unused warning */

	if (!handleSystemEvent(ifitem, evt, generic_data__et)) {
		switch (getState(self)) {
		    case STATE_waiting:
		        switch(trigger__et) {
		                case TRIG_throttlePort__sendData:
		                    {
		                        chain__et = CHAIN_TRANS_tr2_FROM_waiting_TO_cp0_BY_sendDatathrottlePort;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                case TRIG_padalPort__sendData:
		                    {
		                        chain__et = CHAIN_TRANS_tr0_FROM_waiting_TO_cp1_BY_sendDatapadalPort;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                case TRIG_timer__timeout:
		                    {
		                        chain__et = CHAIN_TRANS_tr1_FROM_waiting_TO_waiting_BY_timeouttimer_tr1;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                case TRIG_Internalthrottle__sendData:
		                    {
		                        chain__et = CHAIN_TRANS_tr3_FROM_waiting_TO_waiting_BY_sendDataInternalthrottle_tr3;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                default:
		                    /* should not occur */
		                    break;
		        }
		        break;
		    default:
		        /* should not occur */
		        break;
		}
	}
	if (chain__et != NOT_CAUGHT) {
		exitTo(self, getState(self), catching_state__et);
		{
			etInt16 next__et = executeTransitionChain(self, chain__et, ifitem, generic_data__et);
			next__et = enterHistory(self, next__et);
			setState(self, next__et);
		}
	}
}
static void AirSystem_receiveEvent(AirSystem* self, InterfaceItemBase* ifitem, int evt, void* generic_data__et) {
	int localId = (ifitem==NULL)? 0 : ifitem->localId;
	AirSystem_receiveEventInternal(self, ifitem, localId, evt, generic_data__et);
}

void AirSystem_init(AirSystem* self){
	ET_MSC_LOGGER_SYNC_ENTRY("AirSystem", "init")
	self->state = STATE_TOP;
	{
		int i;
		for (i=0; i<AIRSYSTEM_HISTORY_SIZE; ++i)
			self->history[i] = NO_STATE;
	}
	AirSystem_executeInitTransition(self);
	ET_MSC_LOGGER_SYNC_EXIT
}


void AirSystem_receiveMessage(void* self, const void* ifitem, const etMessage* msg){
	ET_MSC_LOGGER_SYNC_ENTRY("AirSystem", "_receiveMessage")
	AirSystem_receiveEvent(self, (etPort*)ifitem, msg->evtID, (void*)(((char*)msg)+MEM_CEIL(sizeof(etMessage))));

	ET_MSC_LOGGER_SYNC_EXIT
}


/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/

