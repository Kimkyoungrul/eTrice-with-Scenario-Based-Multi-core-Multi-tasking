/**
 * @author generated by eTrice
 *
 * Source File of ActorClass IgnitionActuator
 *
 */

#include "IgnitionActuator.h"

#include "modelbase/etActor.h"
#include "debugging/etLogger.h"
#include "debugging/etMSCLogger.h"
#include "etUnit/etUnit.h"
#include "base/etMemory.h"

#include "room/basic/service/timing/PTimer.h"
#include "TemplateModel/SendData.h"

#include "IgnitionActuator_Utils.h"


/* interface item IDs */
enum interface_items {
	IFITEM_ignitionPort = 3,
	IFITEM_cylinerData = 4,
	IFITEM_igntionactorInternalIn = 1,
	IFITEM_ignitionactorInternalOut = 2,
	IFITEM_timer = 5
};

/* state IDs */
enum state_ids {
	NO_STATE = 0,
	STATE_TOP = 1,
	STATE_waitingData = 2,
	STATE_MAX = 3
};

/* transition chains */
enum ChainIDs {
	CHAIN_TRANS_INITIAL_TO__waitingData = 1,
	CHAIN_TRANS_tr1_FROM_waitingData_TO_cp0_BY_sendDataignitionPort = 2,
	CHAIN_TRANS_tr7_FROM_waitingData_TO_waitingData_BY_recursive2cylinerData_tr7 = 3,
	CHAIN_TRANS_tr8_FROM_waitingData_TO_cp1_BY_sendDataignitionactorInternalOut = 4,
	CHAIN_TRANS_tr4_FROM_waitingData_TO_waitingData_BY_timeouttimer_tr4 = 5
};

/* triggers */
enum triggers {
	POLLING = 0,
	TRIG_igntionactorInternalIn__recursive2 = IFITEM_igntionactorInternalIn + EVT_SHIFT*SendData_OUT_recursive2,
	TRIG_igntionactorInternalIn__recvchangestate = IFITEM_igntionactorInternalIn + EVT_SHIFT*SendData_OUT_recvchangestate,
	TRIG_ignitionactorInternalOut__sendData = IFITEM_ignitionactorInternalOut + EVT_SHIFT*SendData_IN_sendData,
	TRIG_ignitionactorInternalOut__sendchangestate = IFITEM_ignitionactorInternalOut + EVT_SHIFT*SendData_IN_sendchangestate,
	TRIG_ignitionPort__sendData = IFITEM_ignitionPort + EVT_SHIFT*SendData_IN_sendData,
	TRIG_ignitionPort__sendchangestate = IFITEM_ignitionPort + EVT_SHIFT*SendData_IN_sendchangestate,
	TRIG_cylinerData__recursive2 = IFITEM_cylinerData + EVT_SHIFT*SendData_OUT_recursive2,
	TRIG_cylinerData__recvchangestate = IFITEM_cylinerData + EVT_SHIFT*SendData_OUT_recvchangestate,
	TRIG_timer__timeout = IFITEM_timer + EVT_SHIFT*PTimer_OUT_timeout
};

/* state names */
static char* stateStrings[] = {"<no state>","<top>","waitingData"
};

static void setState(IgnitionActuator* self, etInt16 new_state) {
	self->state = new_state;
	ET_MSC_LOGGER_CHANGE_STATE(self->constData->instName, stateStrings[new_state])
}

static etInt16 getState(IgnitionActuator* self) {
	return self->state;
}

/* Entry and Exit Codes */

/* Action Codes */
static void action_TRANS_INITIAL_TO__waitingData(IgnitionActuator* self) {
    fp9 = fopen("ignitionsystem.txt", "a");
    fp10 = fopen("ignitionactuator.txt", "a");
    count=1;
    timer_startTimer(10);
}
static void action_TRANS_tr1_FROM_waitingData_TO_cp0_BY_sendDataignitionPort(IgnitionActuator* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    if(CHECKTIME==16||CHECKTIME==31){
    clock_gettime(CLOCK_MONOTONIC,&ignisysstart);
    pthread_t id;
    id=pthread_self();
    actor7_5_id=(int)id;
    }
    for(int i =0;i<ONE_Milli_SEC_CONUT*0.0075;i++){
    }
    recvscenarioID=data->scenarioID;
    recvinstanceID=data->instanceID;
    recvemer=data->emergency;
    recvignitionsystemtime=data->actor_1;
    recvignitionsystemtime2=data->actor_4;
    recvairmasstime =data->actor_2;
    recvbassfueltime=data->actor_3;
    actor7_1_id=data->actor_1_id;
    actor7_2_id=data->actor_2_id;
    actor7_3_id=data->actor_3_id;
    actor7_4_id=data->actor_4_id;
}
static void action_TRANS_tr3_FROM_cp0_TO_waitingData_COND_tr3(IgnitionActuator* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    clock_gettime(CLOCK_MONOTONIC,&ignisysend);
    //changePriority(pthread_self(),&self->constData->ignitionPort.msgService->messageQueue);
    if(CHECKTIME==15||CHECKTIME==30){
    fprintf(fp9, "scenarionum:%d, instancenum:%d, totaltime:%f\n",recvscenarioID,recvinstanceID,((((1.0e+9*ignisysend.tv_sec)+ignisysend.tv_nsec)/1.0e+6)-recvignitionsystemtime));
    }
    else if(CHECKTIME==16||CHECKTIME==31){
    //fprintf(fp9, "scenarionum:%d, instancenum:%d,ignitionsystem:%f, airmasstime:%f, bassfuelmass: %f, ignitionact:%f, totaltime:%f\n",recvscenarioID,recvinstanceID, recvignitionsystemtime,recvairmasstime,recvbassfueltime,((1.0e+9*(ignisysstart.tv_sec))+(ignisysstart.tv_nsec))/1.0e+6,((((1.0e+9*ignisysend.tv_sec)+ignisysend.tv_nsec)/1.0e+6)-recvignitionsystemtime));
    fprintf(fp9, "%5.6f,scenario_7,%d,instance_%d,actor_7,%f\n",recvignitionsystemtime,actor7_1_id,recvinstanceID,((((1.0e+9*ignisysend.tv_sec)+ignisysend.tv_nsec)/1.0e+6)));
    fprintf(fp9, "%5.6f,scenario_7,%d,instance_%d,actor_18,%f\n",recvairmasstime,actor7_2_id,recvinstanceID,((((1.0e+9*ignisysend.tv_sec)+ignisysend.tv_nsec)/1.0e+6)));
    fprintf(fp9, "%5.6f,scenario_7,%d,instance_%d,actor_19,%f\n",recvbassfueltime,actor7_3_id,recvinstanceID,((((1.0e+9*ignisysend.tv_sec)+ignisysend.tv_nsec)/1.0e+6)));
    fprintf(fp9, "%5.6f,scenario_7,%d,instance_%d,actor_7,%f\n",recvignitionsystemtime2,actor7_4_id,recvinstanceID,((((1.0e+9*ignisysend.tv_sec)+ignisysend.tv_nsec)/1.0e+6)));
    fprintf(fp9, "%5.6f,scenario_7,%d,instance_%d,actor_10,%f\n",((1.0e+9*(ignisysstart.tv_sec))+(ignisysstart.tv_nsec))/1.0e+6,actor7_5_id,recvinstanceID,((((1.0e+9*ignisysend.tv_sec)+ignisysend.tv_nsec)/1.0e+6)));
    }
    fclose(fp9);
    
}
static void action_TRANS_tr7_FROM_waitingData_TO_waitingData_BY_recursive2cylinerData_tr7(IgnitionActuator* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    ADASMessage ADASmessage;
    clock_gettime(CLOCK_MONOTONIC,&igniactstart2);
    ADASmessage.actor_5 = ((1.0e+9*(igniactstart2.tv_sec))+(igniactstart2.tv_nsec))/1.0e+6;
    pthread_t id;
    id=pthread_self();
    ADASmessage.actor_5_id=(int)id;
    ADASmessage.instanceID = data->instanceID;
    ADASmessage.actor_1_id = data->actor_1_id;
    ADASmessage.actor_2_id = data->actor_2_id;
    ADASmessage.actor_1 = data->actor_1;
    ADASmessage.actor_2=data->actor_2;
    //ADASmessage.prior=7;
    igntionactorInternalIn_sendData(&ADASmessage);
}
static void action_TRANS_tr8_FROM_waitingData_TO_cp1_BY_sendDataignitionactorInternalOut(IgnitionActuator* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    clock_gettime(CLOCK_MONOTONIC,&igniactstart3);
    ignitionacttime3 = ((1.0e+9*(igniactstart3.tv_sec))+(igniactstart3.tv_nsec))/1.0e+6;
    pthread_t id;
    id=pthread_self();
    actor10_6_id=(int)id;
    ignitionstarttime=data->actor_1;
    recvcylinertime=data->actor_2;
    recvignitiontiming=data->actor_3;
    recvignitiontimingtime=data->actor_4;
    ignitionacttime2 =data->actor_5;
    actor10_1_id = data->actor_1_id;
    actor10_2_id = data->actor_2_id;
    actor10_3_id = data->actor_3_id;
    actor10_4_id = data->actor_4_id;
    actor10_5_id = data->actor_5_id;
    count2=data->instanceID;
    //struct sched_param param;
    //int sched_policy;
    //pthread_getschedparam(pthread_self(),&sched_policy,&param);
    //priority = param.__sched_priority;
}
static void action_TRANS_tr9_FROM_cp1_TO_waitingData_COND_tr9(IgnitionActuator* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    clock_gettime(CLOCK_MONOTONIC,&igniactend2);
    if(CHECKTIME==17||CHECKTIME==30){
    fprintf(fp10, "instancenum:%d, totaltime:%f\n",count2, ((((1.0e+9*igniactend2.tv_sec)+igniactend2.tv_nsec)/1.0e+6)-ignitionstarttime));
    
    }
    else if(CHECKTIME==18||CHECKTIME==31){
    //fprintf(fp10, "instancenum:%d, cylinernum:%f, ignitiontiming:%f, ignitionacttiming:%f, ignitionact:%f, totaltime:%f\n",count2, recvcylinertime,recvignitiontiming,recvignitiontimingtime, ignitionstarttime,((((1.0e+9*igniactend2.tv_sec)+igniactend2.tv_nsec)/1.0e+6)-ignitionstarttime));
    fprintf(fp10, "%5.6f,scenario_10,%d,instance_%d,actor_10,%f\n",ignitionstarttime,actor10_1_id,count2,((((1.0e+9*igniactend2.tv_sec)+igniactend2.tv_nsec)/1.0e+6)));
    fprintf(fp10, "%5.6f,scenario_10,%d,instance_%d,actor_23,%f\n",recvcylinertime,actor10_2_id,count2,((((1.0e+9*igniactend2.tv_sec)+igniactend2.tv_nsec)/1.0e+6)));
    fprintf(fp10, "%5.6f,scenario_10,%d,instance_%d,actor_10,%f\n",ignitionacttime2,actor10_5_id,count2,((((1.0e+9*igniactend2.tv_sec)+igniactend2.tv_nsec)/1.0e+6)));
    fprintf(fp10, "%5.6f,scenario_10,%d,instance_%d,actor_20,%f\n",recvignitiontiming,actor10_3_id,count2,((((1.0e+9*igniactend2.tv_sec)+igniactend2.tv_nsec)/1.0e+6)));
    fprintf(fp10, "%5.6f,scenario_10,%d,instance_%d,actor_22,%f\n",recvignitiontimingtime,actor10_4_id,count2,((((1.0e+9*igniactend2.tv_sec)+igniactend2.tv_nsec)/1.0e+6)));
    fprintf(fp10, "%5.6f,scenario_10,%d,instance_%d,actor_10,%f\n",ignitionacttime3,actor10_6_id,count2,((((1.0e+9*igniactend2.tv_sec)+igniactend2.tv_nsec)/1.0e+6)));
    }
    fclose(fp10);
}
static void action_TRANS_tr4_FROM_waitingData_TO_waitingData_BY_timeouttimer_tr4(IgnitionActuator* self, const InterfaceItemBase* ifitem) {
    ADASMessage a;
    if(CHECKTIME==17||CHECKTIME==18||CHECKTIME==30||CHECKTIME==31){
    clock_gettime(CLOCK_MONOTONIC,&igniactstart);
    a.actor_1 = ((1.0e+9*igniactstart.tv_sec)+igniactstart.tv_nsec)/1.0e+6;
    pthread_t id;
    id=pthread_self();
    a.actor_1_id=(int)id;
    }
    for(int i =0;i<ONE_Milli_SEC_CONUT*0.0004*MULCCS;i++){
    }
    //a.prior=7;
    a.instanceID = count++;
    cylinerData_sendData(&a);
}
static void action_TRANS_tr6_FROM_cp1_TO_waitingData_COND_tr6(IgnitionActuator* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    clock_gettime(CLOCK_MONOTONIC,&igniactend2);
    if(CHECKTIME==17||CHECKTIME==30){
    fprintf(fp10, "instancenum:%d, totaltime:%f\n",count2, ((((1.0e+9*igniactend2.tv_sec)+igniactend2.tv_nsec)/1.0e+6)-ignitionstarttime));
    }
    else if(CHECKTIME==18||CHECKTIME==31){
    //fprintf(fp10, "instancenum:%d, cylinernum:%f, ignitiontiming:%f, ignitionacttiming:%f, ignitionact:%f, totaltime:%f\n",count2, recvcylinertime,recvignitiontiming,recvignitiontimingtime, ignitionstarttime,((((1.0e+9*igniactend2.tv_sec)+igniactend2.tv_nsec)/1.0e+6)-ignitionstarttime));
    fprintf(fp10, "%5.6f,scenario_10,%d,instance_%d,actor_10,%f\n",ignitionstarttime,actor10_1_id,count2,((((1.0e+9*igniactend2.tv_sec)+igniactend2.tv_nsec)/1.0e+6)));
    fprintf(fp10, "%5.6f,scenario_10,%d,instance_%d,actor_23,%f\n",recvcylinertime,actor10_2_id,count2,((((1.0e+9*igniactend2.tv_sec)+igniactend2.tv_nsec)/1.0e+6)));
    fprintf(fp10, "%5.6f,scenario_10,%d,instance_%d,actor_10,%f\n",ignitionacttime2,actor10_5_id,count2,((((1.0e+9*igniactend2.tv_sec)+igniactend2.tv_nsec)/1.0e+6)));
    fprintf(fp10, "%5.6f,scenario_10,%d,instance_%d,actor_20,%f\n",recvignitiontiming,actor10_3_id,count2,((((1.0e+9*igniactend2.tv_sec)+igniactend2.tv_nsec)/1.0e+6)));
    fprintf(fp10, "%5.6f,scenario_10,%d,instance_%d,actor_22,%f\n",recvignitiontimingtime,actor10_4_id,count2,((((1.0e+9*igniactend2.tv_sec)+igniactend2.tv_nsec)/1.0e+6)));
    fprintf(fp10, "%5.6f,scenario_10,%d,instance_%d,actor_10,%f\n",ignitionacttime3,actor10_6_id,count2,((((1.0e+9*igniactend2.tv_sec)+igniactend2.tv_nsec)/1.0e+6)));
    //fprintf(fp10, "%5.6f,scenario_10,%d,instance_%d,actor_22,%f\n",recvignitiontimingtime,actor10_4_id,count2,((((1.0e+9*igniactend2.tv_sec)+igniactend2.tv_nsec)/1.0e+6)-ignitionstarttime));
    }
    fflush(fp10);
}
static void action_TRANS_tr10_FROM_cp0_TO_waitingData_COND_tr10(IgnitionActuator* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    clock_gettime(CLOCK_MONOTONIC,&ignisysend);
    //changePriority(pthread_self(),&self->constData->ignitionPort.msgService->messageQueue);
    
    if(CHECKTIME==15||CHECKTIME==30){
    fprintf(fp9, "scenarionum:%d, instancenum:%d, totaltime:%f\n",recvscenarioID,recvinstanceID,((((1.0e+9*ignisysend.tv_sec)+ignisysend.tv_nsec)/1.0e+6)-recvignitionsystemtime));
    }
    else if(CHECKTIME==16||CHECKTIME==31){
    //fprintf(fp9, "scenarionum:%d, instancenum:%d,ignitionsystem:%f, airmasstime:%f, bassfuelmass: %f, ignitionact:%f, totaltime:%f\n",recvscenarioID,recvinstanceID, recvignitionsystemtime,recvairmasstime,recvbassfueltime,((1.0e+9*(ignisysstart.tv_sec))+(ignisysstart.tv_nsec))/1.0e+6,((((1.0e+9*ignisysend.tv_sec)+ignisysend.tv_nsec)/1.0e+6)-recvignitionsystemtime));
    fprintf(fp9, "%5.6f,scenario_7,%d,instance_%d,actor_7,%f\n",recvignitionsystemtime,actor7_1_id,recvinstanceID,((((1.0e+9*ignisysend.tv_sec)+ignisysend.tv_nsec)/1.0e+6)));
    fprintf(fp9, "%5.6f,scenario_7,%d,instance_%d,actor_18,%f\n",recvairmasstime,actor7_2_id,recvinstanceID,((((1.0e+9*ignisysend.tv_sec)+ignisysend.tv_nsec)/1.0e+6)));
    fprintf(fp9, "%5.6f,scenario_7,%d,instance_%d,actor_19,%f\n",recvbassfueltime,actor7_3_id,recvinstanceID,((((1.0e+9*ignisysend.tv_sec)+ignisysend.tv_nsec)/1.0e+6)));
    fprintf(fp9, "%5.6f,scenario_7,%d,instance_%d,actor_7,%f\n",recvignitionsystemtime2,actor7_4_id,recvinstanceID,((((1.0e+9*ignisysend.tv_sec)+ignisysend.tv_nsec)/1.0e+6)));
    fprintf(fp9, "%5.6f,scenario_7,%d,instance_%d,actor_10,%f\n",((1.0e+9*(ignisysstart.tv_sec))+(ignisysstart.tv_nsec))/1.0e+6,actor7_5_id,recvinstanceID,((((1.0e+9*ignisysend.tv_sec)+ignisysend.tv_nsec)/1.0e+6)));
    }
    fflush(fp9);
}

/* State Switch Methods */
/**
 * calls exit codes while exiting from the current state to one of its
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(IgnitionActuator* self, etInt16 current__et, etInt16 to) {
	while (current__et!=to) {
		switch (current__et) {
			case STATE_waitingData:
				self->history[STATE_TOP] = STATE_waitingData;
				current__et = STATE_TOP;
				break;
			default:
				/* should not occur */
				break;
		}
	}
}

/**
 * calls action, entry and exit codes along a transition chain. The generic data are cast to typed data
 * matching the trigger of this chain. The ID of the final state is returned
 * @param chain__et - the chain ID
 * @param generic_data__et - the generic data pointer
 * @return the +/- ID of the final state either with a positive sign, that indicates to execute the state's entry code, or a negative sign vice versa
 */
static etInt16 executeTransitionChain(IgnitionActuator* self, int chain__et, const InterfaceItemBase* ifitem, void* generic_data__et) {
	switch (chain__et) {
		case CHAIN_TRANS_INITIAL_TO__waitingData:
		{
			action_TRANS_INITIAL_TO__waitingData(self);
			return STATE_waitingData;
		}
		case CHAIN_TRANS_tr1_FROM_waitingData_TO_cp0_BY_sendDataignitionPort:
		{
			ADASMessage* data = ((ADASMessage*) generic_data__et);
			action_TRANS_tr1_FROM_waitingData_TO_cp0_BY_sendDataignitionPort(self, ifitem, data);
			if (recvinstanceID==10000) {
			action_TRANS_tr3_FROM_cp0_TO_waitingData_COND_tr3(self, ifitem, data);
			return STATE_waitingData;}
			else if (recvemer==1) {
			return STATE_waitingData;}
			else if (recvinstanceID<10000&&recvinstanceID>0) {
			action_TRANS_tr10_FROM_cp0_TO_waitingData_COND_tr10(self, ifitem, data);
			return STATE_waitingData;}
			else {
			return STATE_waitingData;}
		}
		case CHAIN_TRANS_tr7_FROM_waitingData_TO_waitingData_BY_recursive2cylinerData_tr7:
		{
			ADASMessage* data = ((ADASMessage*) generic_data__et);
			action_TRANS_tr7_FROM_waitingData_TO_waitingData_BY_recursive2cylinerData_tr7(self, ifitem, data);
			return STATE_waitingData;
		}
		case CHAIN_TRANS_tr8_FROM_waitingData_TO_cp1_BY_sendDataignitionactorInternalOut:
		{
			ADASMessage* data = ((ADASMessage*) generic_data__et);
			action_TRANS_tr8_FROM_waitingData_TO_cp1_BY_sendDataignitionactorInternalOut(self, ifitem, data);
			if (count2==10000) {
			action_TRANS_tr9_FROM_cp1_TO_waitingData_COND_tr9(self, ifitem, data);
			return STATE_waitingData;}
			else if (count2<10000&&count2>0) {
			action_TRANS_tr6_FROM_cp1_TO_waitingData_COND_tr6(self, ifitem, data);
			return STATE_waitingData;}
			else {
			return STATE_waitingData;}
		}
		case CHAIN_TRANS_tr4_FROM_waitingData_TO_waitingData_BY_timeouttimer_tr4:
		{
			action_TRANS_tr4_FROM_waitingData_TO_waitingData_BY_timeouttimer_tr4(self, ifitem);
			return STATE_waitingData;
		}
			default:
				/* should not occur */
				break;
	}
	return NO_STATE;
}

/**
 * calls entry codes while entering a state's history. The ID of the final leaf state is returned
 * @param state__et - the state which is entered
 * @return - the ID of the final leaf state
 */
static etInt16 enterHistory(IgnitionActuator* self, etInt16 state__et) {
	if (state__et >= STATE_MAX) {
		state__et = (etInt16) (state__et - STATE_MAX);
	}
	while (ET_TRUE) {
		switch (state__et) {
			case STATE_waitingData:
				/* in leaf state: return state id */
				return STATE_waitingData;
			case STATE_TOP:
				state__et = self->history[STATE_TOP];
				break;
			default:
				/* should not occur */
				break;
		}
	}
	/* return NO_STATE; // required by CDT but detected as unreachable by JDT because of while (true) */
}

static void IgnitionActuator_executeInitTransition(IgnitionActuator* self) {
	int chain__et = CHAIN_TRANS_INITIAL_TO__waitingData;
	etInt16 next__et = executeTransitionChain(self, chain__et, NULL, NULL);
	next__et = enterHistory(self, next__et);
	setState(self, next__et);
}

/* receiveEvent contains the main implementation of the FSM */
static void IgnitionActuator_receiveEventInternal(IgnitionActuator* self, InterfaceItemBase* ifitem, int localId, int evt, void* generic_data__et) {
	int trigger__et = localId + EVT_SHIFT*evt;
	int chain__et = NOT_CAUGHT;
	etInt16 catching_state__et = NO_STATE;
	((void)trigger__et);	/* avoids unused warning */

	if (!handleSystemEvent(ifitem, evt, generic_data__et)) {
		switch (getState(self)) {
		    case STATE_waitingData:
		        switch(trigger__et) {
		                case TRIG_ignitionPort__sendData:
		                    {
		                        chain__et = CHAIN_TRANS_tr1_FROM_waitingData_TO_cp0_BY_sendDataignitionPort;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                case TRIG_cylinerData__recursive2:
		                    {
		                        chain__et = CHAIN_TRANS_tr7_FROM_waitingData_TO_waitingData_BY_recursive2cylinerData_tr7;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                case TRIG_ignitionactorInternalOut__sendData:
		                    {
		                        chain__et = CHAIN_TRANS_tr8_FROM_waitingData_TO_cp1_BY_sendDataignitionactorInternalOut;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                case TRIG_timer__timeout:
		                    {
		                        chain__et = CHAIN_TRANS_tr4_FROM_waitingData_TO_waitingData_BY_timeouttimer_tr4;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                default:
		                    /* should not occur */
		                    break;
		        }
		        break;
		    default:
		        /* should not occur */
		        break;
		}
	}
	if (chain__et != NOT_CAUGHT) {
		exitTo(self, getState(self), catching_state__et);
		{
			etInt16 next__et = executeTransitionChain(self, chain__et, ifitem, generic_data__et);
			next__et = enterHistory(self, next__et);
			setState(self, next__et);
		}
	}
}
static void IgnitionActuator_receiveEvent(IgnitionActuator* self, InterfaceItemBase* ifitem, int evt, void* generic_data__et) {
	int localId = (ifitem==NULL)? 0 : ifitem->localId;
	IgnitionActuator_receiveEventInternal(self, ifitem, localId, evt, generic_data__et);
}

void IgnitionActuator_init(IgnitionActuator* self){
	ET_MSC_LOGGER_SYNC_ENTRY("IgnitionActuator", "init")
	self->state = STATE_TOP;
	{
		int i;
		for (i=0; i<IGNITIONACTUATOR_HISTORY_SIZE; ++i)
			self->history[i] = NO_STATE;
	}
	IgnitionActuator_executeInitTransition(self);
	ET_MSC_LOGGER_SYNC_EXIT
}


void IgnitionActuator_receiveMessage(void* self, const void* ifitem, const etMessage* msg){
	ET_MSC_LOGGER_SYNC_ENTRY("IgnitionActuator", "_receiveMessage")
	IgnitionActuator_receiveEvent(self, (etPort*)ifitem, msg->evtID, (void*)(((char*)msg)+MEM_CEIL(sizeof(etMessage))));

	ET_MSC_LOGGER_SYNC_EXIT
}


/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/

