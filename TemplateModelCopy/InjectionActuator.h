/**
 * @author generated by eTrice
 *
 * Header File of ActorClass InjectionActuator
 *
 */

#ifndef _TEMPLATEMODEL_INJECTIONACTUATOR_H_
#define _TEMPLATEMODEL_INJECTIONACTUATOR_H_

#include "etDatatypes.h"
#include "messaging/etMessage.h"

/* include all referenced room classes */
#include "room/basic/service/timing/PTimer.h"
#include "TemplateModel/SendData.h"

/*--------------------- begin user code ---------------------*/
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>
struct timespec injectstart2,injectstart3,injectstart,injectend,injectend2,fuelsysstart,fuelsysend;
FILE *fp6;
FILE *fp7;
/*--------------------- end user code ---------------------*/

typedef struct InjectionActuator InjectionActuator;

/* const part of ActorClass (ROM) */
typedef struct InjectionActuator_const {
	const char* instName;

	/* simple ports */
	const SendDataPort injectionPort;
	const SendDataConjPort cylinerData;
	const SendDataConjPort injectionactorInternalIn;
	const SendDataPort injectionactorInternalOut;

	/* data receive ports */

	/* saps */
	const PTimerConjPort timer;

	/* replicated ports */

	/* services */
} InjectionActuator_const;


/* constant for state machine data */
#define INJECTIONACTUATOR_HISTORY_SIZE 2

/* variable part of ActorClass (RAM) */
struct InjectionActuator {
	const InjectionActuator_const* const constData;

	/* data send ports */

	/*--------------------- attributes ---------------------*/
	 int32 recvscenarioID;
	 int32 recvinstanceID;
	 int32 recvemer;
	 int32 count;
	 int32 count2;
	 float64 recvfuelingsystemtime;
	 float64 recvfuelingsystemtime2;
	 float64 recvcylinertime;
	 float64 recvairmasstime;
	 float64 recvbassairtime;
	 float64 recvtransientfueltime;
	 float64 recvtotalfueltime;
	 float64 recvinjectionactuatortime;
	 float64 injectionacttime;
	 float64 injectionacttime2;
	 float64 injectionacttime3;
	 float64 injectionstarttime;
	 int32 actor6_1_id;
	 int32 actor6_2_id;
	 int32 actor6_3_id;
	 int32 actor6_4_id;
	 int32 actor6_5_id;
	 int32 actor6_6_id;
	 int32 actor9_1_id;
	 int32 actor9_2_id;
	 int32 actor9_3_id;
	 int32 actor9_4_id;
	 int32 actor9_5_id;
	 int32 actor9_6_id;


	/* state machine variables */
	etInt16 state;
	etInt16 history[INJECTIONACTUATOR_HISTORY_SIZE];
};

void InjectionActuator_init(InjectionActuator* self);

void InjectionActuator_receiveMessage(void* self, const void* ifitem, const etMessage* msg);


/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/


#endif /* _TEMPLATEMODEL_INJECTIONACTUATOR_H_ */

