/**
 * @author generated by eTrice
 *
 * Header File of ActorClass Gateway
 *
 */

#ifndef _TEMPLATEMODEL_GATEWAY_H_
#define _TEMPLATEMODEL_GATEWAY_H_

#include "etDatatypes.h"
#include "messaging/etMessage.h"

/* include all referenced room classes */
#include "TemplateModel/PSendData.h"
#include "room/basic/service/timing/PTimer.h"
#include "TemplateModel/SendData.h"

/*--------------------- begin user code ---------------------*/
#include <stdlib.h>
#include <string.h>
/*--------------------- end user code ---------------------*/

typedef struct Gateway Gateway;

/* const part of ActorClass (ROM) */
typedef struct Gateway_const {
	const char* instName;

	/* simple ports */

	/* data receive ports */

	/* saps */
	const PTimerConjPort timer;

	/* replicated ports */
	const etReplPort receiveActuator;
	const etReplPort dataPort;

	/* services */
} Gateway_const;


/* constant for state machine data */
#define GATEWAY_HISTORY_SIZE 2

/* variable part of ActorClass (RAM) */
struct Gateway {
	const Gateway_const* const constData;

	/* data send ports */

	/*--------------------- attributes ---------------------*/
	 char str1[40]
	;
	 char str2[40]
	;
	 char update_data[40]
	;
	 char situation_code[5]
	;
	 char velocity_str[40]
	;
	 char distance_str[40]
	;
	 char colliderNum_str[40]
	;
	 char steering_str[40]
	;
	 char trafficlight_str[40]
	;
	 char temp_string[40]
	;
	 float32 updatevelocity;
	 float32 velocity;
	 float32 distance;
	 float32 steering;
	 int32 colliderNum;
	 int32 updatecolliderNum;
	 int32 tempcollider;
	 int32 trafficlightCount;
	 float32 trafficlight;
	 int32 trafficeindex;


	/* state machine variables */
	etInt16 state;
	etInt16 history[GATEWAY_HISTORY_SIZE];
};

void Gateway_init(Gateway* self);

void Gateway_receiveMessage(void* self, const void* ifitem, const etMessage* msg);


/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/


#endif /* _TEMPLATEMODEL_GATEWAY_H_ */

