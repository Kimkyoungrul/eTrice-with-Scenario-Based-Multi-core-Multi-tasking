/**
 * @author generated by eTrice
 *
 * Source File of ActorClass FuelingSystem
 *
 */

#include "FuelingSystem.h"

#include "modelbase/etActor.h"
#include "debugging/etLogger.h"
#include "debugging/etMSCLogger.h"
#include "etUnit/etUnit.h"
#include "base/etMemory.h"

#include "room/basic/service/timing/PTimer.h"
#include "TemplateModel/SendData.h"

#include "FuelingSystem_Utils.h"


/* interface item IDs */
enum interface_items {
	IFITEM_airflowPort = 3,
	IFITEM_injectiondata = 4,
	IFITEM_fuelingInternalIn = 1,
	IFITEM_fuelingInternalOut = 2,
	IFITEM_timer = 5
};

/* state IDs */
enum state_ids {
	NO_STATE = 0,
	STATE_TOP = 1,
	STATE_waitingData = 2,
	STATE_MAX = 3
};

/* transition chains */
enum ChainIDs {
	CHAIN_TRANS_INITIAL_TO__waitingData = 1,
	CHAIN_TRANS_tr4_FROM_waitingData_TO_cp0_BY_sendDataairflowPort = 2,
	CHAIN_TRANS_tr5_FROM_waitingData_TO_waitingData_BY_timeouttimer_tr5 = 3,
	CHAIN_TRANS_tr0_FROM_waitingData_TO_waitingData_BY_sendDatafuelingInternalOut_tr0 = 4
};

/* triggers */
enum triggers {
	POLLING = 0,
	TRIG_fuelingInternalIn__recursive2 = IFITEM_fuelingInternalIn + EVT_SHIFT*SendData_OUT_recursive2,
	TRIG_fuelingInternalIn__recvchangestate = IFITEM_fuelingInternalIn + EVT_SHIFT*SendData_OUT_recvchangestate,
	TRIG_fuelingInternalOut__sendData = IFITEM_fuelingInternalOut + EVT_SHIFT*SendData_IN_sendData,
	TRIG_fuelingInternalOut__sendchangestate = IFITEM_fuelingInternalOut + EVT_SHIFT*SendData_IN_sendchangestate,
	TRIG_airflowPort__sendData = IFITEM_airflowPort + EVT_SHIFT*SendData_IN_sendData,
	TRIG_airflowPort__sendchangestate = IFITEM_airflowPort + EVT_SHIFT*SendData_IN_sendchangestate,
	TRIG_injectiondata__recursive2 = IFITEM_injectiondata + EVT_SHIFT*SendData_OUT_recursive2,
	TRIG_injectiondata__recvchangestate = IFITEM_injectiondata + EVT_SHIFT*SendData_OUT_recvchangestate,
	TRIG_timer__timeout = IFITEM_timer + EVT_SHIFT*PTimer_OUT_timeout
};

/* state names */
static char* stateStrings[] = {"<no state>","<top>","waitingData"
};

static void setState(FuelingSystem* self, etInt16 new_state) {
	self->state = new_state;
	ET_MSC_LOGGER_CHANGE_STATE(self->constData->instName, stateStrings[new_state])
}

static etInt16 getState(FuelingSystem* self) {
	return self->state;
}

/* Entry and Exit Codes */

/* Action Codes */
static void action_TRANS_INITIAL_TO__waitingData(FuelingSystem* self) {
    count=1;
    fp5 = fopen("MassAir_inject.txt", "a");
    timer_startTimer(10);
}
static void action_TRANS_tr4_FROM_waitingData_TO_cp0_BY_sendDataairflowPort(FuelingSystem* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    if(CHECKTIME==10||CHECKTIME==31){
    clock_gettime(CLOCK_MONOTONIC,&airsensestart);
    pthread_t id;
    id=pthread_self();
    actor3_2_id=(int)id;
    }
    for(int i =0;i<ONE_Milli_SEC_CONUT*0.06*MULCCS;i++){
    }
    actor3_1_id = data->actor_1_id;
    recvairflowsensetime=data->actor_1;//WCET of MassairflowSensor runnable
    airflowscen = data->scenarioID;
    airflowins = data->instanceID;
}
static void action_TRANS_tr5_FROM_waitingData_TO_waitingData_BY_timeouttimer_tr5(FuelingSystem* self, const InterfaceItemBase* ifitem) {
    ADASMessage ADASmessage;
    if(CHECKTIME==11||CHECKTIME==12||CHECKTIME==30||CHECKTIME==31){
    clock_gettime(CLOCK_MONOTONIC,&fuelstart);
    ADASmessage.actor_1 = ((1.0e+9*fuelstart.tv_sec)+fuelstart.tv_nsec)/1.0e+6;
    pthread_t id;
    id=pthread_self();
    ADASmessage.actor_1_id=(int)id;
    }
    for(int i =0;i<ONE_Milli_SEC_CONUT*0.06*MULCCS;i++){
    }
    ADASmessage.instanceID = count;
    //ADASmessage.prior=3;
    
    fuelingInternalIn_sendData(&ADASmessage);
    count++;
    //if(count==10000)
    //timer.kill();
}
static void action_TRANS_tr0_FROM_waitingData_TO_waitingData_BY_sendDatafuelingInternalOut_tr0(FuelingSystem* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    ADASMessage ADASmessage;
    clock_gettime(CLOCK_MONOTONIC,&fuelstart2);
    ADASmessage.actor_5 = ((1.0e+9*(fuelstart2.tv_sec))+(fuelstart2.tv_nsec))/1.0e+6;
    pthread_t id;
    id=pthread_self();
    ADASmessage.actor_5_id=(int)id;
    ADASmessage.scenarioID=6;
    ADASmessage.instanceID=data->instanceID;
    ADASmessage.actor_1 = data->actor_1;
    ADASmessage.actor_2 =data->actor_2;
    ADASmessage.actor_3 =data->actor_3;
    ADASmessage.actor_4 =data->actor_4;
    ADASmessage.actor_1_id = data->actor_1_id;
    ADASmessage.actor_2_id = data->actor_2_id;
    ADASmessage.actor_3_id = data->actor_3_id;
    ADASmessage.actor_4_id = data->actor_4_id;
    //ADASmessage.prior=3;
    injectiondata_sendData(&ADASmessage);
    
}
static void action_TRANS_tr3_FROM_cp0_TO_waitingData_COND_tr3(FuelingSystem* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    clock_gettime(CLOCK_MONOTONIC,&airsenseend);
    //changePriority(pthread_self(),&self->constData->airflowPort.msgService->messageQueue);
    if(CHECKTIME==9||CHECKTIME==30){
    fprintf(fp5, "scenarionum: %d,instancenum: %d, totaltime:%f\n",airflowscen,airflowins,((((1.0e+9*airsenseend.tv_sec)+airsenseend.tv_nsec)/1.0e+6)-recvairflowsensetime));
    }
    else if(CHECKTIME==10||CHECKTIME==31){
    //fprintf(fp5, "scenarionum: %d,instancenum: %d, airflowsensor:%f, fuelsys:%f, totaltime:%f\n",airflowscen,airflowins, recvairflowsensetime,((1.0e+9*(airsensestart.tv_sec))+(airsensestart.tv_nsec))/1.0e+6,((((1.0e+9*airsenseend.tv_sec)+airsenseend.tv_nsec)/1.0e+6)-recvairflowsensetime));
    fprintf(fp5, "%5.6f,scenario_3,%d,instance_%d,actor_3,%f\n%f,scenario_3,%d,instance_%d,actor_6,%f\n",recvairflowsensetime,actor3_1_id,airflowins,((((1.0e+9*airsenseend.tv_sec)+airsenseend.tv_nsec)/1.0e+6)),((1.0e+9*(airsensestart.tv_sec))+(airsensestart.tv_nsec))/1.0e+6,actor3_2_id,airflowins,((((1.0e+9*airsenseend.tv_sec)+airsenseend.tv_nsec)/1.0e+6)));
    }
    fclose (fp5);
}
static void action_TRANS_tr6_FROM_cp0_TO_waitingData_COND_tr6(FuelingSystem* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    clock_gettime(CLOCK_MONOTONIC,&airsenseend);
    //changePriority(pthread_self(),&self->constData->airflowPort.msgService->messageQueue);
    if(CHECKTIME==9||CHECKTIME==30){
    fprintf(fp5, "scenarionum: %d,instancenum: %d, totaltime:%f\n",airflowscen,airflowins,((((1.0e+9*airsenseend.tv_sec)+airsenseend.tv_nsec)/1.0e+6)-recvairflowsensetime));
    }
    else if(CHECKTIME==10||CHECKTIME==31){
    //fprintf(fp5, "scenarionum: %d,instancenum: %d, airflowsensor:%f, fuelsys:%f, totaltime:%f\n",airflowscen,airflowins, recvairflowsensetime,((1.0e+9*(airsensestart.tv_sec))+(airsensestart.tv_nsec))/1.0e+6,((((1.0e+9*airsenseend.tv_sec)+airsenseend.tv_nsec)/1.0e+6)-recvairflowsensetime));
    fprintf(fp5, "%5.6f,scenario_3,%d,instance_%d,actor_3,%f\n%f,scenario_3,%d,instance_%d,actor_6,%f\n",recvairflowsensetime,actor3_1_id,airflowins,((((1.0e+9*airsenseend.tv_sec)+airsenseend.tv_nsec)/1.0e+6)),((1.0e+9*(airsensestart.tv_sec))+(airsensestart.tv_nsec))/1.0e+6,actor3_2_id,airflowins,((((1.0e+9*airsenseend.tv_sec)+airsenseend.tv_nsec)/1.0e+6)));
    }
    fflush(fp5);
}

/* State Switch Methods */
/**
 * calls exit codes while exiting from the current state to one of its
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(FuelingSystem* self, etInt16 current__et, etInt16 to) {
	while (current__et!=to) {
		switch (current__et) {
			case STATE_waitingData:
				self->history[STATE_TOP] = STATE_waitingData;
				current__et = STATE_TOP;
				break;
			default:
				/* should not occur */
				break;
		}
	}
}

/**
 * calls action, entry and exit codes along a transition chain. The generic data are cast to typed data
 * matching the trigger of this chain. The ID of the final state is returned
 * @param chain__et - the chain ID
 * @param generic_data__et - the generic data pointer
 * @return the +/- ID of the final state either with a positive sign, that indicates to execute the state's entry code, or a negative sign vice versa
 */
static etInt16 executeTransitionChain(FuelingSystem* self, int chain__et, const InterfaceItemBase* ifitem, void* generic_data__et) {
	switch (chain__et) {
		case CHAIN_TRANS_INITIAL_TO__waitingData:
		{
			action_TRANS_INITIAL_TO__waitingData(self);
			return STATE_waitingData;
		}
		case CHAIN_TRANS_tr4_FROM_waitingData_TO_cp0_BY_sendDataairflowPort:
		{
			ADASMessage* data = ((ADASMessage*) generic_data__et);
			action_TRANS_tr4_FROM_waitingData_TO_cp0_BY_sendDataairflowPort(self, ifitem, data);
			if (airflowemer==1) {
			return STATE_waitingData;}
			else if (airflowins==10000) {
			action_TRANS_tr3_FROM_cp0_TO_waitingData_COND_tr3(self, ifitem, data);
			return STATE_waitingData;}
			else if (airflowins<10000&&airflowins>0) {
			action_TRANS_tr6_FROM_cp0_TO_waitingData_COND_tr6(self, ifitem, data);
			return STATE_waitingData;}
			else {
			return STATE_waitingData;}
		}
		case CHAIN_TRANS_tr5_FROM_waitingData_TO_waitingData_BY_timeouttimer_tr5:
		{
			action_TRANS_tr5_FROM_waitingData_TO_waitingData_BY_timeouttimer_tr5(self, ifitem);
			return STATE_waitingData;
		}
		case CHAIN_TRANS_tr0_FROM_waitingData_TO_waitingData_BY_sendDatafuelingInternalOut_tr0:
		{
			ADASMessage* data = ((ADASMessage*) generic_data__et);
			action_TRANS_tr0_FROM_waitingData_TO_waitingData_BY_sendDatafuelingInternalOut_tr0(self, ifitem, data);
			return STATE_waitingData;
		}
			default:
				/* should not occur */
				break;
	}
	return NO_STATE;
}

/**
 * calls entry codes while entering a state's history. The ID of the final leaf state is returned
 * @param state__et - the state which is entered
 * @return - the ID of the final leaf state
 */
static etInt16 enterHistory(FuelingSystem* self, etInt16 state__et) {
	if (state__et >= STATE_MAX) {
		state__et = (etInt16) (state__et - STATE_MAX);
	}
	while (ET_TRUE) {
		switch (state__et) {
			case STATE_waitingData:
				/* in leaf state: return state id */
				return STATE_waitingData;
			case STATE_TOP:
				state__et = self->history[STATE_TOP];
				break;
			default:
				/* should not occur */
				break;
		}
	}
	/* return NO_STATE; // required by CDT but detected as unreachable by JDT because of while (true) */
}

static void FuelingSystem_executeInitTransition(FuelingSystem* self) {
	int chain__et = CHAIN_TRANS_INITIAL_TO__waitingData;
	etInt16 next__et = executeTransitionChain(self, chain__et, NULL, NULL);
	next__et = enterHistory(self, next__et);
	setState(self, next__et);
}

/* receiveEvent contains the main implementation of the FSM */
static void FuelingSystem_receiveEventInternal(FuelingSystem* self, InterfaceItemBase* ifitem, int localId, int evt, void* generic_data__et) {
	int trigger__et = localId + EVT_SHIFT*evt;
	int chain__et = NOT_CAUGHT;
	etInt16 catching_state__et = NO_STATE;
	((void)trigger__et);	/* avoids unused warning */

	if (!handleSystemEvent(ifitem, evt, generic_data__et)) {
		switch (getState(self)) {
		    case STATE_waitingData:
		        switch(trigger__et) {
		                case TRIG_airflowPort__sendData:
		                    {
		                        chain__et = CHAIN_TRANS_tr4_FROM_waitingData_TO_cp0_BY_sendDataairflowPort;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                case TRIG_timer__timeout:
		                    {
		                        chain__et = CHAIN_TRANS_tr5_FROM_waitingData_TO_waitingData_BY_timeouttimer_tr5;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                case TRIG_fuelingInternalOut__sendData:
		                    {
		                        chain__et = CHAIN_TRANS_tr0_FROM_waitingData_TO_waitingData_BY_sendDatafuelingInternalOut_tr0;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                default:
		                    /* should not occur */
		                    break;
		        }
		        break;
		    default:
		        /* should not occur */
		        break;
		}
	}
	if (chain__et != NOT_CAUGHT) {
		exitTo(self, getState(self), catching_state__et);
		{
			etInt16 next__et = executeTransitionChain(self, chain__et, ifitem, generic_data__et);
			next__et = enterHistory(self, next__et);
			setState(self, next__et);
		}
	}
}
static void FuelingSystem_receiveEvent(FuelingSystem* self, InterfaceItemBase* ifitem, int evt, void* generic_data__et) {
	int localId = (ifitem==NULL)? 0 : ifitem->localId;
	FuelingSystem_receiveEventInternal(self, ifitem, localId, evt, generic_data__et);
}

void FuelingSystem_init(FuelingSystem* self){
	ET_MSC_LOGGER_SYNC_ENTRY("FuelingSystem", "init")
	self->state = STATE_TOP;
	{
		int i;
		for (i=0; i<FUELINGSYSTEM_HISTORY_SIZE; ++i)
			self->history[i] = NO_STATE;
	}
	FuelingSystem_executeInitTransition(self);
	ET_MSC_LOGGER_SYNC_EXIT
}


void FuelingSystem_receiveMessage(void* self, const void* ifitem, const etMessage* msg){
	ET_MSC_LOGGER_SYNC_ENTRY("FuelingSystem", "_receiveMessage")
	FuelingSystem_receiveEvent(self, (etPort*)ifitem, msg->evtID, (void*)(((char*)msg)+MEM_CEIL(sizeof(etMessage))));

	ET_MSC_LOGGER_SYNC_EXIT
}


/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/

