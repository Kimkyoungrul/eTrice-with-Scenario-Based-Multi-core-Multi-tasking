/**
 * @author generated by eTrice
 *
 * Source File of ProtocolClass PSendData
 * 
 */

#include "PSendData.h"
#include "debugging/etMSCLogger.h"
#include "PSendData_Utils.h"


/*--------------------- port methods */

void PSendDataPort_recursive(const PSendDataPort* self) {
	ET_MSC_LOGGER_SYNC_ENTRY("PSendDataPort", "recursive")
		etPort_sendMessage(self, PSendData_OUT_recursive, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(self->myInstName, "recursive", self->peerInstName)
	ET_MSC_LOGGER_SYNC_EXIT
}

void PSendDataReplPort_recursive_broadcast(const PSendDataReplPort* self) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PSendDataReplPort", "recursive")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PSendData_OUT_recursive, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[i].port.myInstName, "recursive", ((etReplPort*)self)->ports[i].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

void PSendDataReplPort_recursive(const PSendDataReplPort* self, int idx__et) {
	ET_MSC_LOGGER_SYNC_ENTRY("PSendDataReplPort", "recursive")
	if (0<=idx__et && idx__et<((etReplPort*)self)->size) {
		etPort_sendMessage((&((etReplPort*)self)->ports[idx__et].port), PSendData_OUT_recursive, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[idx__et].port.myInstName, "recursive", ((etReplPort*)self)->ports[idx__et].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

etInt32 PSendDataReplPort_getReplication(const PSendDataReplPort* self) {
	return ((etReplPort*)self)->size;
}



void PSendDataConjPort_sendData(const PSendDataConjPort* self, ADASMessage* data__et) {
	ET_MSC_LOGGER_SYNC_ENTRY("PSendDataConjPort", "sendData")
		etPort_sendMessage(self, PSendData_IN_sendData, sizeof(ADASMessage), data__et);
		ET_MSC_LOGGER_ASYNC_OUT(self->myInstName, "sendData", self->peerInstName)
	ET_MSC_LOGGER_SYNC_EXIT
}

void PSendDataConjReplPort_sendData_broadcast(const PSendDataConjReplPort* self, ADASMessage* data__et) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PSendDataConjReplPort", "sendData")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PSendData_IN_sendData, sizeof(ADASMessage), data__et);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[i].port.myInstName, "sendData", ((etReplPort*)self)->ports[i].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

void PSendDataConjReplPort_sendData(const PSendDataConjReplPort* self, int idx__et, ADASMessage* data__et) {
	ET_MSC_LOGGER_SYNC_ENTRY("PSendDataConjReplPort", "sendData")
	if (0<=idx__et && idx__et<((etReplPort*)self)->size) {
		etPort_sendMessage((&((etReplPort*)self)->ports[idx__et].port), PSendData_IN_sendData, sizeof(ADASMessage), data__et);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[idx__et].port.myInstName, "sendData", ((etReplPort*)self)->ports[idx__et].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

etInt32 PSendDataConjReplPort_getReplication(const PSendDataConjReplPort* self) {
	return ((etReplPort*)self)->size;
}



/*--------------------- debug helpers */

/* message names as strings for debugging (generate MSC) */
static const char* const PSendData_messageStrings[] = {"MIN", "recursive","sendData", "MAX"};

const char* PSendData_getMessageString(int msg_id) {
	if (msg_id<PSendData_MSG_MIN || msg_id>PSendData_MSG_MAX+1){
		/* id out of range */
		return "Message ID out of range";
	}
	else{
		return PSendData_messageStrings[msg_id];
	}
}
