/**
 * @author generated by eTrice
 *
 * Header File of ProtocolClass PingPongProtocol
 * 
 */

#ifndef _TEMPLATEMODEL_PINGPONGPROTOCOL_H_
#define _TEMPLATEMODEL_PINGPONGPROTOCOL_H_

#include "etDatatypes.h"
#include "modelbase/etPort.h"


/* include all referenced room classes */


/* message IDs */
enum PingPongProtocol_msg_ids {
	PingPongProtocol_MSG_MIN = 0,
	PingPongProtocol_OUT_pong = 1,
	PingPongProtocol_IN_ping = 2,
	PingPongProtocol_MSG_MAX = 3
};

/*--------------------- port structs and methods */
typedef etPort PingPongProtocolPort;
typedef etReplPort PingPongProtocolReplPort;


void PingPongProtocolPort_pong(const PingPongProtocolPort* self);
void PingPongProtocolReplPort_pong_broadcast(const PingPongProtocolReplPort* self);
void PingPongProtocolReplPort_pong(const PingPongProtocolReplPort* self, int idx);


etInt32 PingPongProtocolReplPort_getReplication(const PingPongProtocolReplPort* self);
typedef etPort PingPongProtocolConjPort;
typedef etReplPort PingPongProtocolConjReplPort;


void PingPongProtocolConjPort_ping(const PingPongProtocolConjPort* self);
void PingPongProtocolConjReplPort_ping_broadcast(const PingPongProtocolConjReplPort* self);
void PingPongProtocolConjReplPort_ping(const PingPongProtocolConjReplPort* self, int idx);


etInt32 PingPongProtocolConjReplPort_getReplication(const PingPongProtocolConjReplPort* self);

/*--------------------- debug helpers */

/* get message string for message id */
const char* PingPongProtocol_getMessageString(int msg_id);


#endif /* _TEMPLATEMODEL_PINGPONGPROTOCOL_H_ */

