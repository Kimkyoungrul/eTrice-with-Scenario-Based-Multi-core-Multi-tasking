/**
 * @author generated by eTrice
 *
 * Source File of ProtocolClass PingPongProtocol
 * 
 */

#include "PingPongProtocol.h"
#include "debugging/etMSCLogger.h"
#include "PingPongProtocol_Utils.h"


/*--------------------- port methods */

void PingPongProtocolPort_pong(const PingPongProtocolPort* self) {
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolPort", "pong")
		etPort_sendMessage(self, PingPongProtocol_OUT_pong, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(self->myInstName, "pong", self->peerInstName)
	ET_MSC_LOGGER_SYNC_EXIT
}

void PingPongProtocolReplPort_pong_broadcast(const PingPongProtocolReplPort* self) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolReplPort", "pong")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PingPongProtocol_OUT_pong, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[i].port.myInstName, "pong", ((etReplPort*)self)->ports[i].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

void PingPongProtocolReplPort_pong(const PingPongProtocolReplPort* self, int idx__et) {
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolReplPort", "pong")
	if (0<=idx__et && idx__et<((etReplPort*)self)->size) {
		etPort_sendMessage((&((etReplPort*)self)->ports[idx__et].port), PingPongProtocol_OUT_pong, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[idx__et].port.myInstName, "pong", ((etReplPort*)self)->ports[idx__et].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

etInt32 PingPongProtocolReplPort_getReplication(const PingPongProtocolReplPort* self) {
	return ((etReplPort*)self)->size;
}



void PingPongProtocolConjPort_ping(const PingPongProtocolConjPort* self) {
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolConjPort", "ping")
		etPort_sendMessage(self, PingPongProtocol_IN_ping, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(self->myInstName, "ping", self->peerInstName)
	ET_MSC_LOGGER_SYNC_EXIT
}

void PingPongProtocolConjReplPort_ping_broadcast(const PingPongProtocolConjReplPort* self) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolConjReplPort", "ping")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), PingPongProtocol_IN_ping, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[i].port.myInstName, "ping", ((etReplPort*)self)->ports[i].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

void PingPongProtocolConjReplPort_ping(const PingPongProtocolConjReplPort* self, int idx__et) {
	ET_MSC_LOGGER_SYNC_ENTRY("PingPongProtocolConjReplPort", "ping")
	if (0<=idx__et && idx__et<((etReplPort*)self)->size) {
		etPort_sendMessage((&((etReplPort*)self)->ports[idx__et].port), PingPongProtocol_IN_ping, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[idx__et].port.myInstName, "ping", ((etReplPort*)self)->ports[idx__et].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

etInt32 PingPongProtocolConjReplPort_getReplication(const PingPongProtocolConjReplPort* self) {
	return ((etReplPort*)self)->size;
}



/*--------------------- debug helpers */

/* message names as strings for debugging (generate MSC) */
static const char* const PingPongProtocol_messageStrings[] = {"MIN", "pong","ping", "MAX"};

const char* PingPongProtocol_getMessageString(int msg_id) {
	if (msg_id<PingPongProtocol_MSG_MIN || msg_id>PingPongProtocol_MSG_MAX+1){
		/* id out of range */
		return "Message ID out of range";
	}
	else{
		return PingPongProtocol_messageStrings[msg_id];
	}
}
