/**
 * @author generated by eTrice
 *
 * Header File of ActorClass TransientFuelingCompensationEntity
 *
 */

#ifndef _TEMPLATEMODEL_TRANSIENTFUELINGCOMPENSATIONENTITY_H_
#define _TEMPLATEMODEL_TRANSIENTFUELINGCOMPENSATIONENTITY_H_

#include "etDatatypes.h"
#include "messaging/etMessage.h"

/* include all referenced room classes */
#include "TemplateModel/SendData.h"

/*--------------------- begin user code ---------------------*/
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>
struct timespec transientstart,transientend;
/*--------------------- end user code ---------------------*/

typedef struct TransientFuelingCompensationEntity TransientFuelingCompensationEntity;

/* const part of ActorClass (ROM) */
typedef struct TransientFuelingCompensationEntity_const {
	const char* instName;

	/* simple ports */
	const SendDataPort transientfueldata;
	const SendDataConjPort transientfueldatasend;

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
} TransientFuelingCompensationEntity_const;


/* constant for state machine data */
#define TRANSIENTFUELINGCOMPENSATIONENTITY_HISTORY_SIZE 2

/* variable part of ActorClass (RAM) */
struct TransientFuelingCompensationEntity {
	const TransientFuelingCompensationEntity_const* const constData;

	/* data send ports */

	/*--------------------- attributes ---------------------*/


	/* state machine variables */
	etInt16 state;
	etInt16 history[TRANSIENTFUELINGCOMPENSATIONENTITY_HISTORY_SIZE];
};

void TransientFuelingCompensationEntity_init(TransientFuelingCompensationEntity* self);

void TransientFuelingCompensationEntity_receiveMessage(void* self, const void* ifitem, const etMessage* msg);


/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/


#endif /* _TEMPLATEMODEL_TRANSIENTFUELINGCOMPENSATIONENTITY_H_ */

