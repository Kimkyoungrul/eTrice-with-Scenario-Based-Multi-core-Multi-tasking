/**
 * @author generated by eTrice
 *
 * Source File of ActorClass ValveActuator
 *
 */

#include "ValveActuator.h"

#include "modelbase/etActor.h"
#include "debugging/etLogger.h"
#include "debugging/etMSCLogger.h"
#include "etUnit/etUnit.h"
#include "base/etMemory.h"

#include "room/basic/service/timing/PTimer.h"
#include "TemplateModel/SendData.h"

#include "ValveActuator_Utils.h"


/* interface item IDs */
enum interface_items {
	IFITEM_receiveData = 1,
	IFITEM_timer = 2
};

/* state IDs */
enum state_ids {
	NO_STATE = 0,
	STATE_TOP = 1,
	STATE_waitingData = 2,
	STATE_actuate = 3,
	STATE_MAX = 4
};

/* transition chains */
enum ChainIDs {
	CHAIN_TRANS_INITIAL_TO__waitingData = 1,
	CHAIN_TRANS_tr0_FROM_waitingData_TO_actuate_BY_sendABSDatareceiveData = 2,
	CHAIN_TRANS_tr1_FROM_actuate_TO_waitingData_BY_timeouttimer = 3
};

/* triggers */
enum triggers {
	POLLING = 0,
	TRIG_receiveData__sendThrottleData = IFITEM_receiveData + EVT_SHIFT*SendData_IN_sendThrottleData,
	TRIG_receiveData__sendSpeedData = IFITEM_receiveData + EVT_SHIFT*SendData_IN_sendSpeedData,
	TRIG_receiveData__sendInjectionData = IFITEM_receiveData + EVT_SHIFT*SendData_IN_sendInjectionData,
	TRIG_receiveData__sendIgnitionData = IFITEM_receiveData + EVT_SHIFT*SendData_IN_sendIgnitionData,
	TRIG_receiveData__sendWheelData = IFITEM_receiveData + EVT_SHIFT*SendData_IN_sendWheelData,
	TRIG_receiveData__sendABSData = IFITEM_receiveData + EVT_SHIFT*SendData_IN_sendABSData,
	TRIG_receiveData__recursive = IFITEM_receiveData + EVT_SHIFT*SendData_IN_recursive,
	TRIG_timer__timeout = IFITEM_timer + EVT_SHIFT*PTimer_OUT_timeout
};

/* state names */
static char* stateStrings[] = {"<no state>","<top>","waitingData",
"actuate"
};

static void setState(ValveActuator* self, etInt16 new_state) {
	self->state = new_state;
	ET_MSC_LOGGER_CHANGE_STATE(self->constData->instName, stateStrings[new_state])
}

static etInt16 getState(ValveActuator* self) {
	return self->state;
}

/* Entry and Exit Codes */
static void entry_actuate(ValveActuator* self) {
	receiveData_receiveABSData();
	struct timespec t1,t2;
	clock_gettime(CLOCK_MONOTONIC,&t1);
	for(;;){
	clock_gettime(CLOCK_MONOTONIC,&t2);
	if((((1000000000.0*(t2.tv_sec-t1.tv_sec))+(t2.tv_nsec-t1.tv_nsec))/1000000.0)>0.1){
	break;
	}
	}
	clock_gettime(CLOCK_MONOTONIC,&valveend);
	printf("valve actuator %f,%f\n",abs,((1000000000.0*valveend.tv_sec)+valveend.tv_nsec)/1000000.0);
	FILE *fp = fopen("ABSprofiletime.txt", "a");
	fprintf(fp, "1,%f,%f,%f,%f,%f\n", wheeltime, abstime, ((1000000000.0*(valveend.tv_sec-valvestart.tv_sec))+(valveend.tv_nsec-valvestart.tv_nsec))/1000000.0,(((1000000000.0*valveend.tv_sec)+valveend.tv_nsec)/1000000.0)-wheelstart,abs);
	fclose (fp);
	timer_startTimeout(1);
}

/* Action Codes */
static void action_TRANS_tr0_FROM_waitingData_TO_actuate_BY_sendABSDatareceiveData(ValveActuator* self, const InterfaceItemBase* ifitem, ABSData* data) {
    clock_gettime(CLOCK_MONOTONIC,&valvestart);
    abs=data->absdata;
    wheeltime=data->wheeltimedata;
    abstime=data->abstimedata;
    wheelstart=data->wheelstarttimedata;
}

/* State Switch Methods */
/**
 * calls exit codes while exiting from the current state to one of its
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(ValveActuator* self, etInt16 current__et, etInt16 to) {
	while (current__et!=to) {
		switch (current__et) {
			case STATE_waitingData:
				self->history[STATE_TOP] = STATE_waitingData;
				current__et = STATE_TOP;
				break;
			case STATE_actuate:
				self->history[STATE_TOP] = STATE_actuate;
				current__et = STATE_TOP;
				break;
			default:
				/* should not occur */
				break;
		}
	}
}

/**
 * calls action, entry and exit codes along a transition chain. The generic data are cast to typed data
 * matching the trigger of this chain. The ID of the final state is returned
 * @param chain__et - the chain ID
 * @param generic_data__et - the generic data pointer
 * @return the +/- ID of the final state either with a positive sign, that indicates to execute the state's entry code, or a negative sign vice versa
 */
static etInt16 executeTransitionChain(ValveActuator* self, int chain__et, const InterfaceItemBase* ifitem, void* generic_data__et) {
	switch (chain__et) {
		case CHAIN_TRANS_INITIAL_TO__waitingData:
		{
			return STATE_waitingData;
		}
		case CHAIN_TRANS_tr0_FROM_waitingData_TO_actuate_BY_sendABSDatareceiveData:
		{
			ABSData* data = ((ABSData*) generic_data__et);
			action_TRANS_tr0_FROM_waitingData_TO_actuate_BY_sendABSDatareceiveData(self, ifitem, data);
			return STATE_actuate;
		}
		case CHAIN_TRANS_tr1_FROM_actuate_TO_waitingData_BY_timeouttimer:
		{
			return STATE_waitingData;
		}
			default:
				/* should not occur */
				break;
	}
	return NO_STATE;
}

/**
 * calls entry codes while entering a state's history. The ID of the final leaf state is returned
 * @param state__et - the state which is entered
 * @return - the ID of the final leaf state
 */
static etInt16 enterHistory(ValveActuator* self, etInt16 state__et) {
	etBool skip_entry__et = ET_FALSE;
	if (state__et >= STATE_MAX) {
		state__et = (etInt16) (state__et - STATE_MAX);
		skip_entry__et = ET_TRUE;
	}
	while (ET_TRUE) {
		switch (state__et) {
			case STATE_waitingData:
				/* in leaf state: return state id */
				return STATE_waitingData;
			case STATE_actuate:
				if (!(skip_entry__et)) entry_actuate(self);
				/* in leaf state: return state id */
				return STATE_actuate;
			case STATE_TOP:
				state__et = self->history[STATE_TOP];
				break;
			default:
				/* should not occur */
				break;
		}
		skip_entry__et = ET_FALSE;
	}
	/* return NO_STATE; // required by CDT but detected as unreachable by JDT because of while (true) */
}

static void ValveActuator_executeInitTransition(ValveActuator* self) {
	int chain__et = CHAIN_TRANS_INITIAL_TO__waitingData;
	etInt16 next__et = executeTransitionChain(self, chain__et, NULL, NULL);
	next__et = enterHistory(self, next__et);
	setState(self, next__et);
}

/* receiveEvent contains the main implementation of the FSM */
static void ValveActuator_receiveEventInternal(ValveActuator* self, InterfaceItemBase* ifitem, int localId, int evt, void* generic_data__et) {
	int trigger__et = localId + EVT_SHIFT*evt;
	int chain__et = NOT_CAUGHT;
	etInt16 catching_state__et = NO_STATE;
	((void)trigger__et);	/* avoids unused warning */

	if (!handleSystemEvent(ifitem, evt, generic_data__et)) {
		switch (getState(self)) {
		    case STATE_waitingData:
		        switch(trigger__et) {
		                case TRIG_receiveData__sendABSData:
		                    {
		                        chain__et = CHAIN_TRANS_tr0_FROM_waitingData_TO_actuate_BY_sendABSDatareceiveData;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                default:
		                    /* should not occur */
		                    break;
		        }
		        break;
		    case STATE_actuate:
		        switch(trigger__et) {
		                case TRIG_timer__timeout:
		                    {
		                        chain__et = CHAIN_TRANS_tr1_FROM_actuate_TO_waitingData_BY_timeouttimer;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                default:
		                    /* should not occur */
		                    break;
		        }
		        break;
		    default:
		        /* should not occur */
		        break;
		}
	}
	if (chain__et != NOT_CAUGHT) {
		exitTo(self, getState(self), catching_state__et);
		{
			etInt16 next__et = executeTransitionChain(self, chain__et, ifitem, generic_data__et);
			next__et = enterHistory(self, next__et);
			setState(self, next__et);
		}
	}
}
static void ValveActuator_receiveEvent(ValveActuator* self, InterfaceItemBase* ifitem, int evt, void* generic_data__et) {
	int localId = (ifitem==NULL)? 0 : ifitem->localId;
	ValveActuator_receiveEventInternal(self, ifitem, localId, evt, generic_data__et);
}

void ValveActuator_init(ValveActuator* self){
	ET_MSC_LOGGER_SYNC_ENTRY("ValveActuator", "init")
	self->state = STATE_TOP;
	{
		int i;
		for (i=0; i<VALVEACTUATOR_HISTORY_SIZE; ++i)
			self->history[i] = NO_STATE;
	}
	ValveActuator_executeInitTransition(self);
	ET_MSC_LOGGER_SYNC_EXIT
}


void ValveActuator_receiveMessage(void* self, const void* ifitem, const etMessage* msg){
	ET_MSC_LOGGER_SYNC_ENTRY("ValveActuator", "_receiveMessage")
	ValveActuator_receiveEvent(self, (etPort*)ifitem, msg->evtID, (void*)(((char*)msg)+MEM_CEIL(sizeof(etMessage))));

	ET_MSC_LOGGER_SYNC_EXIT
}


/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/
 bool ValveActuator_ALKchoicePoint0(ValveActuator* self, charPtr s_code) {
	if(strcmp(s_code, "L") == 0)
		 return true;
	else
		 return false;
}
 int32 ValveActuator_lane_change(ValveActuator* self) {
	return -2;
}

