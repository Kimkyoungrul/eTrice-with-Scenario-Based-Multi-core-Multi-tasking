/**
 * @author generated by eTrice
 *
 * Source File of ActorClass ADAS_Controller
 *
 */

#include "ADAS_Controller.h"

#include "modelbase/etActor.h"
#include "debugging/etLogger.h"
#include "debugging/etMSCLogger.h"
#include "etUnit/etUnit.h"
#include "base/etMemory.h"

#include "TemplateModel/SendData.h"

#include "ADAS_Controller_Utils.h"


/* interface item IDs */
enum interface_items {
	IFITEM_relayPortA = 1,
	IFITEM_relayPortB = 2,
	IFITEM_relayPortC = 3,
	IFITEM_receiveData = 4
};

/* state IDs */
enum state_ids {
	NO_STATE = 0,
	STATE_TOP = 1,
	STATE_waitingData = 2,
	STATE_EmergencyStop = 3,
	STATE_NormalStop = 4,
	STATE_LaneChange = 5,
	STATE_Go = 6,
	STATE_MAX = 7
};

/* transition chains */
enum ChainIDs {
	CHAIN_TRANS_INITIAL_TO__waitingData = 1,
	CHAIN_TRANS_tr0_FROM_waitingData_TO_cp0_BY_sendDatareceiveData = 2,
	CHAIN_TRANS_tr6_FROM_NormalStop_TO_waitingData_BY_recursive2relayPortA = 3,
	CHAIN_TRANS_tr7_FROM_Go_TO_waitingData_BY_recursive2relayPortA = 4,
	CHAIN_TRANS_tr8_FROM_EmergencyStop_TO_waitingData_BY_recursive2relayPortC = 5,
	CHAIN_TRANS_tr9_FROM_LaneChange_TO_waitingData_BY_recursive2relayPortB = 6
};

/* triggers */
enum triggers {
	POLLING = 0,
	TRIG_relayPortA__recursive2 = IFITEM_relayPortA + EVT_SHIFT*SendData_OUT_recursive2,
	TRIG_relayPortB__recursive2 = IFITEM_relayPortB + EVT_SHIFT*SendData_OUT_recursive2,
	TRIG_relayPortC__recursive2 = IFITEM_relayPortC + EVT_SHIFT*SendData_OUT_recursive2,
	TRIG_receiveData__sendData = IFITEM_receiveData + EVT_SHIFT*SendData_IN_sendData
};

/* state names */
static char* stateStrings[] = {"<no state>","<top>","waitingData",
"EmergencyStop",
"NormalStop",
"LaneChange",
"Go"
};

static void setState(ADAS_Controller* self, etInt16 new_state) {
	self->state = new_state;
	ET_MSC_LOGGER_CHANGE_STATE(self->constData->instName, stateStrings[new_state])
}

static etInt16 getState(ADAS_Controller* self) {
	return self->state;
}

/* Entry and Exit Codes */
static void entry_EmergencyStop(ADAS_Controller* self) {
	//clock_gettime(CLOCK_MONOTONIC,&end);
	ADASMessage ADASmessage;
	strcpy(ADASmessage.message, retain_str);
	//ADASmessage.veloresponse=velorespon;
	//ADASmessage.colresponse=colrespon;
	//ADASmessage.trafficresponse=trafficrespon;
	//ADASmessage.steerresponse=steerrespon;
	//ADASmessage.velofirsttime=firstvelotime;
	//ADASmessage.colliderfirsttime=firstcollidertime;
	//ADASmessage.trafficfirsttime=firsttraffictime;
	//ADASmessage.steerfirsttime=firststeertime;
	//ADASmessage.velosecondtime=((1000000000.0*(end.tv_sec-velostart.tv_sec))+(end.tv_nsec-velostart.tv_nsec))/1000000.0;
	//ADASmessage.collidersecondtime=((1000000000.0*(end.tv_sec-colliderstart.tv_sec))+(end.tv_nsec-colliderstart.tv_nsec))/1000000.0;
	//ADASmessage.trafficsecondtime=((1000000000.0*(end.tv_sec-trafficstart.tv_sec))+(end.tv_nsec-trafficstart.tv_nsec))/1000000.0;
	//ADASmessage.steersecondtime=((1000000000.0*(end.tv_sec-steerstart.tv_sec))+(end.tv_nsec-steerstart.tv_nsec))/1000000.0;
	relayPortA_sendData(&ADASmessage);
	relayPortB_sendData(&ADASmessage);
	relayPortC_sendData(&ADASmessage);
}
static void entry_NormalStop(ADAS_Controller* self) {
	clock_gettime(CLOCK_MONOTONIC,&end);
	ADASMessage ADASmessage;
	strcpy(ADASmessage.message, retain_str);
	//ADASmessage.veloresponse=velorespon;
	//ADASmessage.colresponse=colrespon;
	//ADASmessage.trafficresponse=trafficrespon;
	//ADASmessage.steerresponse=steerrespon;
	//ADASmessage.velofirsttime=firstvelotime;
	//ADASmessage.colliderfirsttime=firstcollidertime;
	//ADASmessage.trafficfirsttime=firsttraffictime;
	//ADASmessage.steerfirsttime=firststeertime;
	//ADASmessage.velosecondtime=((1000000000.0*(end.tv_sec-velostart.tv_sec))+(end.tv_nsec-velostart.tv_nsec))/1000000.0;
	//ADASmessage.collidersecondtime=((1000000000.0*(end.tv_sec-colliderstart.tv_sec))+(end.tv_nsec-colliderstart.tv_nsec))/1000000.0;
	//ADASmessage.trafficsecondtime=((1000000000.0*(end.tv_sec-trafficstart.tv_sec))+(end.tv_nsec-trafficstart.tv_nsec))/1000000.0;
	//ADASmessage.steersecondtime=((1000000000.0*(end.tv_sec-steerstart.tv_sec))+(end.tv_nsec-steerstart.tv_nsec))/1000000.0;
	relayPortA_sendData(&ADASmessage);
	relayPortB_sendData(&ADASmessage);
	relayPortC_sendData(&ADASmessage);
}
static void entry_LaneChange(ADAS_Controller* self) {
	clock_gettime(CLOCK_MONOTONIC,&end);
	ADASMessage ADASmessage;
	strcpy(ADASmessage.message, retain_str);
	//ADASmessage.veloresponse=velorespon;
	//ADASmessage.colresponse=colrespon;
	//ADASmessage.trafficresponse=trafficrespon;
	//ADASmessage.steerresponse=steerrespon;
	//ADASmessage.velofirsttime=firstvelotime;
	//ADASmessage.colliderfirsttime=firstcollidertime;
	//ADASmessage.trafficfirsttime=firsttraffictime;
	//ADASmessage.steerfirsttime=firststeertime;
	//ADASmessage.velosecondtime=((1000000000.0*(end.tv_sec-velostart.tv_sec))+(end.tv_nsec-velostart.tv_nsec))/1000000.0;
	//ADASmessage.collidersecondtime=((1000000000.0*(end.tv_sec-colliderstart.tv_sec))+(end.tv_nsec-colliderstart.tv_nsec))/1000000.0;
	//ADASmessage.trafficsecondtime=((1000000000.0*(end.tv_sec-trafficstart.tv_sec))+(end.tv_nsec-trafficstart.tv_nsec))/1000000.0;
	//ADASmessage.steersecondtime=((1000000000.0*(end.tv_sec-steerstart.tv_sec))+(end.tv_nsec-steerstart.tv_nsec))/1000000.0;
	relayPortA_sendData(&ADASmessage);
	relayPortB_sendData(&ADASmessage);
	relayPortC_sendData(&ADASmessage);
}
static void entry_Go(ADAS_Controller* self) {
	clock_gettime(CLOCK_MONOTONIC,&end);
	ADASMessage ADASmessage;
	strcpy(ADASmessage.message, retain_str);
	//ADASmessage.veloresponse=velorespon;
	//ADASmessage.colresponse=colrespon;
	//ADASmessage.trafficresponse=trafficrespon;
	//ADASmessage.steerresponse=steerrespon;
	//ADASmessage.velofirsttime=firstvelotime;
	//ADASmessage.colliderfirsttime=firstcollidertime;
	//ADASmessage.trafficfirsttime=firsttraffictime;
	//ADASmessage.steerfirsttime=firststeertime;
	//ADASmessage.velosecondtime=((1000000000.0*(end.tv_sec-velostart.tv_sec))+(end.tv_nsec-velostart.tv_nsec))/1000000.0;
	//ADASmessage.collidersecondtime=((1000000000.0*(end.tv_sec-colliderstart.tv_sec))+(end.tv_nsec-colliderstart.tv_nsec))/1000000.0;
	//ADASmessage.trafficsecondtime=((1000000000.0*(end.tv_sec-trafficstart.tv_sec))+(end.tv_nsec-trafficstart.tv_nsec))/1000000.0;
	//ADASmessage.steersecondtime=((1000000000.0*(end.tv_sec-steerstart.tv_sec))+(end.tv_nsec-steerstart.tv_nsec))/1000000.0;
	relayPortA_sendData(&ADASmessage);
	relayPortB_sendData(&ADASmessage);
	relayPortC_sendData(&ADASmessage);
	
}

/* Action Codes */
static void action_TRANS_INITIAL_TO__waitingData(ADAS_Controller* self) {
    strcpy(velocity_str,"-100");
    strcpy(distance_str,"-100");
    strcpy(trafficLight_str,"-100");
    strcpy(colliderNum_str,"-100");
    
}
static void action_TRANS_tr0_FROM_waitingData_TO_cp0_BY_sendDatareceiveData(ADAS_Controller* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    strcpy(str, data->message);
    //receiveData.recursive();
    //printf("velocity: %s, steer: %s, distance :%s\n",velocity_str, steering_str, distance_str);
    //printf("inside the ADAScontroller(from gateway) str: %s\n", str);
    //fflush(stdout);
    char *ptr;
    ptr = strtok(str, ",");
    if(!strcmp(ptr,"v")){
    //firstvelotime=data->velofirsttime;
    //velorespon=data->veloresponse;
    //clock_gettime(CLOCK_MONOTONIC,&velostart);
    ptr = strtok(NULL, ",");
    strcpy(velocity_str, ptr);
    velocity=atof(velocity_str);
    //printf("control_velocity: %.2f\n",velocity);
    //fflush(stdout);
    }
    else if(!strcmp(ptr,"s")){
    //firststeertime=data->steerfirsttime;
    //steerrespon=data->steerresponse;
    
    //clock_gettime(CLOCK_MONOTONIC,&steerstart);
    ptr = strtok(NULL, ",");
    strcpy(steering_str, ptr);
    steering=atof(steering_str);
    //printf("control_steering: %.2f\n",steering);
    //fflush(stdout);
    }
    else if(!strcmp(ptr,"t")){
    //firsttraffictime=data->trafficfirsttime;
    //trafficrespon=data->trafficresponse;
    //clock_gettime(CLOCK_MONOTONIC,&trafficstart);
    ptr = strtok(NULL, ",");
    strcpy(trafficLight_str, ptr);
    trafficLight=atof(trafficLight_str);
    //printf("control_trafficLight: %.2f\n",trafficLight);
    //fflush(stdout);
    }
    else if(!strcmp(ptr,"d")){
    //firstcollidertime=data->colliderfirsttime;
    //colrespon=data->colresponse;
    //clock_gettime(CLOCK_MONOTONIC,&colliderstart);
    ptr = strtok(NULL, ",");
    strcpy(distance_str, ptr);
    distance=atof(distance_str);
    //printf("control_distance: %.2f\n",distance);
    ptr = strtok(NULL, ",");
    ptr = strtok(NULL, ",");
    strcpy(colliderNum_str, ptr);
    colliderNum=atoi(colliderNum_str);
    //printf("control_colliderNum: %d\n",colliderNum);
    //fflush(stdout);
    }
}
static void action_TRANS_tr2_FROM_cp0_TO_NormalStop_COND_tr2(ADAS_Controller* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    strcpy(retain_str,velocity_str);
    strcat(retain_str,",");
    strcat(retain_str,distance_str);
    strcat(retain_str,",");
    strcat(retain_str,colliderNum_str);
    strcat(retain_str,",");
    strcat(retain_str,steering_str);
    strcat(retain_str,",");
    strcat(retain_str,trafficLight_str);
    strcat(retain_str, ",N");
}
static void action_TRANS_tr3_FROM_cp0_TO_LaneChange_COND_tr3(ADAS_Controller* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    strcpy(retain_str,velocity_str);
    strcat(retain_str,",");
    strcat(retain_str,distance_str);
    strcat(retain_str,",");
    strcat(retain_str,colliderNum_str);
    strcat(retain_str,",");
    strcat(retain_str,steering_str);
    strcat(retain_str,",");
    strcat(retain_str,trafficLight_str);
    strcat(retain_str, ",L");
}
static void action_TRANS_tr5_FROM_cp0_TO_Go(ADAS_Controller* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    strcpy(retain_str,velocity_str);
    strcat(retain_str,",");
    strcat(retain_str,distance_str);
    strcat(retain_str,",");
    strcat(retain_str,colliderNum_str);
    strcat(retain_str,",");
    strcat(retain_str,steering_str);
    strcat(retain_str,",");
    strcat(retain_str,trafficLight_str);
    strcat(retain_str, ",G");
}
static void action_TRANS_tr4_FROM_cp0_TO_EmergencyStop_COND_tr4(ADAS_Controller* self, const InterfaceItemBase* ifitem, ADASMessage* data) {
    strcpy(retain_str,velocity_str);
    strcat(retain_str,",");
    strcat(retain_str,distance_str);
    strcat(retain_str,",");
    strcat(retain_str,colliderNum_str);
    strcat(retain_str,",");
    strcat(retain_str,steering_str);
    strcat(retain_str,",");
    strcat(retain_str,trafficLight_str);
    strcat(retain_str, ",E");
}
static void action_TRANS_tr6_FROM_NormalStop_TO_waitingData_BY_recursive2relayPortA(ADAS_Controller* self, const InterfaceItemBase* ifitem) {
    //strcpy(str, data->buffer);
    //strcpy(send_str, str);
    //DDataBuffer buf;
    //strcpy(buf.buffer, send_str);
    strcpy(velocity_str,"-100");
    strcpy(distance_str,"-100");
    strcpy(trafficLight_str,"-100");
    strcpy(colliderNum_str,"-100");
    strcpy(steering_str,"-100");
    
    receiveData_recursive2_broadcast();
}
static void action_TRANS_tr7_FROM_Go_TO_waitingData_BY_recursive2relayPortA(ADAS_Controller* self, const InterfaceItemBase* ifitem) {
    //strcpy(str, data->buffer);
    //strcpy(send_str, str);
    //DDataBuffer buf;
    //strcpy(buf.buffer, send_str);
    strcpy(velocity_str,"-100");
    strcpy(distance_str,"-100");
    strcpy(trafficLight_str,"-100");
    strcpy(colliderNum_str,"-100");
    strcpy(steering_str,"-100");
    receiveData_recursive2_broadcast();
}
static void action_TRANS_tr8_FROM_EmergencyStop_TO_waitingData_BY_recursive2relayPortC(ADAS_Controller* self, const InterfaceItemBase* ifitem) {
    //strcpy(str, data->buffer);
    //strcpy(send_str, str);
    //DDataBuffer buf;
    //strcpy(buf.buffer, send_str);
    strcpy(velocity_str,"-100");
    strcpy(distance_str,"-100");
    strcpy(trafficLight_str,"-100");
    strcpy(colliderNum_str,"-100");
    strcpy(steering_str,"-100");
    receiveData_recursive2_broadcast();
}
static void action_TRANS_tr9_FROM_LaneChange_TO_waitingData_BY_recursive2relayPortB(ADAS_Controller* self, const InterfaceItemBase* ifitem) {
    //strcpy(str, data->buffer);
    //strcpy(send_str, str);
    //DDataBuffer buf;
    //strcpy(buf.buffer, send_str);
    strcpy(velocity_str,"-100");
    strcpy(distance_str,"-100");
    strcpy(trafficLight_str,"-100");
    strcpy(colliderNum_str,"-100");
    strcpy(steering_str,"-100");
    receiveData_recursive2_broadcast();
}

/* State Switch Methods */
/**
 * calls exit codes while exiting from the current state to one of its
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(ADAS_Controller* self, etInt16 current__et, etInt16 to) {
	while (current__et!=to) {
		switch (current__et) {
			case STATE_waitingData:
				self->history[STATE_TOP] = STATE_waitingData;
				current__et = STATE_TOP;
				break;
			case STATE_EmergencyStop:
				self->history[STATE_TOP] = STATE_EmergencyStop;
				current__et = STATE_TOP;
				break;
			case STATE_NormalStop:
				self->history[STATE_TOP] = STATE_NormalStop;
				current__et = STATE_TOP;
				break;
			case STATE_LaneChange:
				self->history[STATE_TOP] = STATE_LaneChange;
				current__et = STATE_TOP;
				break;
			case STATE_Go:
				self->history[STATE_TOP] = STATE_Go;
				current__et = STATE_TOP;
				break;
			default:
				/* should not occur */
				break;
		}
	}
}

/**
 * calls action, entry and exit codes along a transition chain. The generic data are cast to typed data
 * matching the trigger of this chain. The ID of the final state is returned
 * @param chain__et - the chain ID
 * @param generic_data__et - the generic data pointer
 * @return the +/- ID of the final state either with a positive sign, that indicates to execute the state's entry code, or a negative sign vice versa
 */
static etInt16 executeTransitionChain(ADAS_Controller* self, int chain__et, const InterfaceItemBase* ifitem, void* generic_data__et) {
	switch (chain__et) {
		case CHAIN_TRANS_INITIAL_TO__waitingData:
		{
			action_TRANS_INITIAL_TO__waitingData(self);
			return STATE_waitingData;
		}
		case CHAIN_TRANS_tr0_FROM_waitingData_TO_cp0_BY_sendDatareceiveData:
		{
			ADASMessage* data = ((ADASMessage*) generic_data__et);
			action_TRANS_tr0_FROM_waitingData_TO_cp0_BY_sendDatareceiveData(self, ifitem, data);
			if (!strcmp(velocity_str,"-100")||!strcmp(distance_str,"-100")||!strcmp(trafficLight_str,"-100")||!strcmp(colliderNum_str,"-100")||!strcmp(steering_str,"-100")) {
			return STATE_waitingData;}
			else if (ChoicePoint0(distance, velocity, trafficLight, colliderNum) == 2) {
			action_TRANS_tr2_FROM_cp0_TO_NormalStop_COND_tr2(self, ifitem, data);
			return STATE_NormalStop;}
			else if (ChoicePoint0(distance, velocity, trafficLight, colliderNum) == 3) {
			action_TRANS_tr3_FROM_cp0_TO_LaneChange_COND_tr3(self, ifitem, data);
			return STATE_LaneChange;}
			else if (ChoicePoint0(distance, velocity, trafficLight, colliderNum) == 1) {
			action_TRANS_tr4_FROM_cp0_TO_EmergencyStop_COND_tr4(self, ifitem, data);
			return STATE_EmergencyStop;}
			else {
			action_TRANS_tr5_FROM_cp0_TO_Go(self, ifitem, data);
			return STATE_Go;}
		}
		case CHAIN_TRANS_tr6_FROM_NormalStop_TO_waitingData_BY_recursive2relayPortA:
		{
			action_TRANS_tr6_FROM_NormalStop_TO_waitingData_BY_recursive2relayPortA(self, ifitem);
			return STATE_waitingData;
		}
		case CHAIN_TRANS_tr7_FROM_Go_TO_waitingData_BY_recursive2relayPortA:
		{
			action_TRANS_tr7_FROM_Go_TO_waitingData_BY_recursive2relayPortA(self, ifitem);
			return STATE_waitingData;
		}
		case CHAIN_TRANS_tr8_FROM_EmergencyStop_TO_waitingData_BY_recursive2relayPortC:
		{
			action_TRANS_tr8_FROM_EmergencyStop_TO_waitingData_BY_recursive2relayPortC(self, ifitem);
			return STATE_waitingData;
		}
		case CHAIN_TRANS_tr9_FROM_LaneChange_TO_waitingData_BY_recursive2relayPortB:
		{
			action_TRANS_tr9_FROM_LaneChange_TO_waitingData_BY_recursive2relayPortB(self, ifitem);
			return STATE_waitingData;
		}
			default:
				/* should not occur */
				break;
	}
	return NO_STATE;
}

/**
 * calls entry codes while entering a state's history. The ID of the final leaf state is returned
 * @param state__et - the state which is entered
 * @return - the ID of the final leaf state
 */
static etInt16 enterHistory(ADAS_Controller* self, etInt16 state__et) {
	etBool skip_entry__et = ET_FALSE;
	if (state__et >= STATE_MAX) {
		state__et = (etInt16) (state__et - STATE_MAX);
		skip_entry__et = ET_TRUE;
	}
	while (ET_TRUE) {
		switch (state__et) {
			case STATE_waitingData:
				/* in leaf state: return state id */
				return STATE_waitingData;
			case STATE_EmergencyStop:
				if (!(skip_entry__et)) entry_EmergencyStop(self);
				/* in leaf state: return state id */
				return STATE_EmergencyStop;
			case STATE_NormalStop:
				if (!(skip_entry__et)) entry_NormalStop(self);
				/* in leaf state: return state id */
				return STATE_NormalStop;
			case STATE_LaneChange:
				if (!(skip_entry__et)) entry_LaneChange(self);
				/* in leaf state: return state id */
				return STATE_LaneChange;
			case STATE_Go:
				if (!(skip_entry__et)) entry_Go(self);
				/* in leaf state: return state id */
				return STATE_Go;
			case STATE_TOP:
				state__et = self->history[STATE_TOP];
				break;
			default:
				/* should not occur */
				break;
		}
		skip_entry__et = ET_FALSE;
	}
	/* return NO_STATE; // required by CDT but detected as unreachable by JDT because of while (true) */
}

static void ADAS_Controller_executeInitTransition(ADAS_Controller* self) {
	int chain__et = CHAIN_TRANS_INITIAL_TO__waitingData;
	etInt16 next__et = executeTransitionChain(self, chain__et, NULL, NULL);
	next__et = enterHistory(self, next__et);
	setState(self, next__et);
}

/* receiveEvent contains the main implementation of the FSM */
static void ADAS_Controller_receiveEventInternal(ADAS_Controller* self, InterfaceItemBase* ifitem, int localId, int evt, void* generic_data__et) {
	int trigger__et = localId + EVT_SHIFT*evt;
	int chain__et = NOT_CAUGHT;
	etInt16 catching_state__et = NO_STATE;
	((void)trigger__et);	/* avoids unused warning */

	if (!handleSystemEvent(ifitem, evt, generic_data__et)) {
		switch (getState(self)) {
		    case STATE_waitingData:
		        switch(trigger__et) {
		                case TRIG_receiveData__sendData:
		                    {
		                        chain__et = CHAIN_TRANS_tr0_FROM_waitingData_TO_cp0_BY_sendDatareceiveData;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                default:
		                    /* should not occur */
		                    break;
		        }
		        break;
		    case STATE_EmergencyStop:
		        switch(trigger__et) {
		                case TRIG_relayPortC__recursive2:
		                    {
		                        chain__et = CHAIN_TRANS_tr8_FROM_EmergencyStop_TO_waitingData_BY_recursive2relayPortC;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                default:
		                    /* should not occur */
		                    break;
		        }
		        break;
		    case STATE_NormalStop:
		        switch(trigger__et) {
		                case TRIG_relayPortA__recursive2:
		                    {
		                        chain__et = CHAIN_TRANS_tr6_FROM_NormalStop_TO_waitingData_BY_recursive2relayPortA;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                default:
		                    /* should not occur */
		                    break;
		        }
		        break;
		    case STATE_LaneChange:
		        switch(trigger__et) {
		                case TRIG_relayPortB__recursive2:
		                    {
		                        chain__et = CHAIN_TRANS_tr9_FROM_LaneChange_TO_waitingData_BY_recursive2relayPortB;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                default:
		                    /* should not occur */
		                    break;
		        }
		        break;
		    case STATE_Go:
		        switch(trigger__et) {
		                case TRIG_relayPortA__recursive2:
		                    {
		                        chain__et = CHAIN_TRANS_tr7_FROM_Go_TO_waitingData_BY_recursive2relayPortA;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                default:
		                    /* should not occur */
		                    break;
		        }
		        break;
		    default:
		        /* should not occur */
		        break;
		}
	}
	if (chain__et != NOT_CAUGHT) {
		exitTo(self, getState(self), catching_state__et);
		{
			etInt16 next__et = executeTransitionChain(self, chain__et, ifitem, generic_data__et);
			next__et = enterHistory(self, next__et);
			setState(self, next__et);
		}
	}
}
static void ADAS_Controller_receiveEvent(ADAS_Controller* self, InterfaceItemBase* ifitem, int evt, void* generic_data__et) {
	int localId = (ifitem==NULL)? 0 : ifitem->localId;
	ADAS_Controller_receiveEventInternal(self, ifitem, localId, evt, generic_data__et);
}

void ADAS_Controller_init(ADAS_Controller* self){
	ET_MSC_LOGGER_SYNC_ENTRY("ADAS_Controller", "init")
	self->state = STATE_TOP;
	{
		int i;
		for (i=0; i<ADAS_CONTROLLER_HISTORY_SIZE; ++i)
			self->history[i] = NO_STATE;
	}
	ADAS_Controller_executeInitTransition(self);
	ET_MSC_LOGGER_SYNC_EXIT
}


void ADAS_Controller_receiveMessage(void* self, const void* ifitem, const etMessage* msg){
	ET_MSC_LOGGER_SYNC_ENTRY("ADAS_Controller", "_receiveMessage")
	ADAS_Controller_receiveEvent(self, (etPort*)ifitem, msg->evtID, (void*)(((char*)msg)+MEM_CEIL(sizeof(etMessage))));

	ET_MSC_LOGGER_SYNC_EXIT
}


/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/
 int32 ADAS_Controller_ChoicePoint0(ADAS_Controller* self, float32 dist, float32 velo, float32 tl, int32 cnum) {
	if(cnum == 1){
		 if(dist < 18.0 && velo == 0.0)
			 return 3;
		 else if(dist <= 80 || velo >= 60)
			 return 2;
		 else
			 return 4;
	}
	else if(cnum == 2){
		 if(dist < 10.0 && velo == 0.0)
			 return 3;
		 else if(dist <= 10)
			 return 1;
		 else if(velo >= 60)
			 return 2;
		 else
			 return 4;
	}
	else{
		 if(dist <= 10 && tl > 0)
			 return 1;
		 else if((dist <= 80 && tl > 0) || velo >= 60)
			 return 2;
		 else
			 return 4;
	}
}

