/**
 * @author generated by eTrice
 *
 * Source File of ProtocolClass SendData
 * 
 */

#include "SendData.h"
#include "debugging/etMSCLogger.h"
#include "SendData_Utils.h"


/*--------------------- port methods */

void SendDataPort_recursive2(const SendDataPort* self, ADASMessage* data__et) {
	ET_MSC_LOGGER_SYNC_ENTRY("SendDataPort", "recursive2")
		etPort_sendMessage(self, SendData_OUT_recursive2, sizeof(ADASMessage), data__et);
		ET_MSC_LOGGER_ASYNC_OUT(self->myInstName, "recursive2", self->peerInstName)
	ET_MSC_LOGGER_SYNC_EXIT
}

void SendDataReplPort_recursive2_broadcast(const SendDataReplPort* self, ADASMessage* data__et) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("SendDataReplPort", "recursive2")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), SendData_OUT_recursive2, sizeof(ADASMessage), data__et);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[i].port.myInstName, "recursive2", ((etReplPort*)self)->ports[i].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

void SendDataReplPort_recursive2(const SendDataReplPort* self, int idx__et, ADASMessage* data__et) {
	ET_MSC_LOGGER_SYNC_ENTRY("SendDataReplPort", "recursive2")
	if (0<=idx__et && idx__et<((etReplPort*)self)->size) {
		etPort_sendMessage((&((etReplPort*)self)->ports[idx__et].port), SendData_OUT_recursive2, sizeof(ADASMessage), data__et);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[idx__et].port.myInstName, "recursive2", ((etReplPort*)self)->ports[idx__et].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}


void SendDataPort_recvchangestate(const SendDataPort* self) {
	ET_MSC_LOGGER_SYNC_ENTRY("SendDataPort", "recvchangestate")
		etPort_sendMessage(self, SendData_OUT_recvchangestate, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(self->myInstName, "recvchangestate", self->peerInstName)
	ET_MSC_LOGGER_SYNC_EXIT
}

void SendDataReplPort_recvchangestate_broadcast(const SendDataReplPort* self) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("SendDataReplPort", "recvchangestate")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), SendData_OUT_recvchangestate, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[i].port.myInstName, "recvchangestate", ((etReplPort*)self)->ports[i].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

void SendDataReplPort_recvchangestate(const SendDataReplPort* self, int idx__et) {
	ET_MSC_LOGGER_SYNC_ENTRY("SendDataReplPort", "recvchangestate")
	if (0<=idx__et && idx__et<((etReplPort*)self)->size) {
		etPort_sendMessage((&((etReplPort*)self)->ports[idx__et].port), SendData_OUT_recvchangestate, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[idx__et].port.myInstName, "recvchangestate", ((etReplPort*)self)->ports[idx__et].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

etInt32 SendDataReplPort_getReplication(const SendDataReplPort* self) {
	return ((etReplPort*)self)->size;
}



void SendDataConjPort_sendData(const SendDataConjPort* self, ADASMessage* data__et) {
	ET_MSC_LOGGER_SYNC_ENTRY("SendDataConjPort", "sendData")
		etPort_sendMessage(self, SendData_IN_sendData, sizeof(ADASMessage), data__et);
		ET_MSC_LOGGER_ASYNC_OUT(self->myInstName, "sendData", self->peerInstName)
	ET_MSC_LOGGER_SYNC_EXIT
}

void SendDataConjReplPort_sendData_broadcast(const SendDataConjReplPort* self, ADASMessage* data__et) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("SendDataConjReplPort", "sendData")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), SendData_IN_sendData, sizeof(ADASMessage), data__et);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[i].port.myInstName, "sendData", ((etReplPort*)self)->ports[i].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

void SendDataConjReplPort_sendData(const SendDataConjReplPort* self, int idx__et, ADASMessage* data__et) {
	ET_MSC_LOGGER_SYNC_ENTRY("SendDataConjReplPort", "sendData")
	if (0<=idx__et && idx__et<((etReplPort*)self)->size) {
		etPort_sendMessage((&((etReplPort*)self)->ports[idx__et].port), SendData_IN_sendData, sizeof(ADASMessage), data__et);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[idx__et].port.myInstName, "sendData", ((etReplPort*)self)->ports[idx__et].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}


void SendDataConjPort_sendchangestate(const SendDataConjPort* self) {
	ET_MSC_LOGGER_SYNC_ENTRY("SendDataConjPort", "sendchangestate")
		etPort_sendMessage(self, SendData_IN_sendchangestate, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(self->myInstName, "sendchangestate", self->peerInstName)
	ET_MSC_LOGGER_SYNC_EXIT
}

void SendDataConjReplPort_sendchangestate_broadcast(const SendDataConjReplPort* self) {
	int i;
	ET_MSC_LOGGER_SYNC_ENTRY("SendDataConjReplPort", "sendchangestate")
	for (i=0; i<((etReplPort*)self)->size; ++i) {
		etPort_sendMessage((&((etReplPort*)self)->ports[i].port), SendData_IN_sendchangestate, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[i].port.myInstName, "sendchangestate", ((etReplPort*)self)->ports[i].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

void SendDataConjReplPort_sendchangestate(const SendDataConjReplPort* self, int idx__et) {
	ET_MSC_LOGGER_SYNC_ENTRY("SendDataConjReplPort", "sendchangestate")
	if (0<=idx__et && idx__et<((etReplPort*)self)->size) {
		etPort_sendMessage((&((etReplPort*)self)->ports[idx__et].port), SendData_IN_sendchangestate, 0, NULL);
		ET_MSC_LOGGER_ASYNC_OUT(((etReplPort*)self)->ports[idx__et].port.myInstName, "sendchangestate", ((etReplPort*)self)->ports[idx__et].port.peerInstName)
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

etInt32 SendDataConjReplPort_getReplication(const SendDataConjReplPort* self) {
	return ((etReplPort*)self)->size;
}



/*--------------------- debug helpers */

/* message names as strings for debugging (generate MSC) */
static const char* const SendData_messageStrings[] = {"MIN", "recursive2","recvchangestate","sendData", "sendchangestate", "MAX"};

const char* SendData_getMessageString(int msg_id) {
	if (msg_id<SendData_MSG_MIN || msg_id>SendData_MSG_MAX+1){
		/* id out of range */
		return "Message ID out of range";
	}
	else{
		return SendData_messageStrings[msg_id];
	}
}
