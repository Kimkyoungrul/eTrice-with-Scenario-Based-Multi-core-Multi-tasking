/**
 * @author generated by eTrice
 *
 * Header File of ActorClass ATcpClient
 *
 */

#ifndef _ROOM_BASIC_SERVICE_TCP_ATCPCLIENT_H_
#define _ROOM_BASIC_SERVICE_TCP_ATCPCLIENT_H_

#include "etDatatypes.h"
#include "messaging/etMessage.h"

#include "room/basic/service/tcp/DTcpPayload.h"
#include "room/basic/service/tcp/PTcpControl.h"
#include "room/basic/service/tcp/PTcpPayload.h"

/*--------------------- begin user code ---------------------*/
#include "osal/etTcpSockets.h"
/*--------------------- end user code ---------------------*/

typedef struct ATcpClient ATcpClient;

/* const part of ActorClass (ROM) */
typedef struct ATcpClient_const {
	const char* instName;

	/* simple ports */
	const PTcpControlPort controlPort;
	const PTcpPayloadPort payloadPort;

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
} ATcpClient_const;


/* constant for state machine data */
#define ATCPCLIENT_HISTORY_SIZE 2

/* variable part of ActorClass (RAM) */
struct ATcpClient {
	const ATcpClient_const* const constData;

	/* data send ports */

	/*--------------------- attributes ---------------------*/
	 int32 lastError;
	 DTcpPayload payloadRecvBuffer;
	 etSocketConnectionData* client;


	/* state machine variables */
	etInt16 state;
	etInt16 history[ATCPCLIENT_HISTORY_SIZE];
};

void ATcpClient_init(ATcpClient* self);

void ATcpClient_receiveMessage(void* self, const void* ifitem, const etMessage* msg);


/*--------------------- user constructor/destructor ---------------------*/
 void ATcpClient_ctor(ATcpClient* self);
 void ATcpClient_dtor(ATcpClient* self);

/*--------------------- operations ---------------------*/
 bool ATcpClient_hasError(ATcpClient* self);
 void ATcpClient_setErrorCode(ATcpClient* self, int32 value);


#endif /* _ROOM_BASIC_SERVICE_TCP_ATCPCLIENT_H_ */

